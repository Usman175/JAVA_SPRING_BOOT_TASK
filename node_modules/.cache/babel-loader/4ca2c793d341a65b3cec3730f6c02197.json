{"ast":null,"code":"import { SELECTED_CHANNEL, MY_CHANNEL_LIST, LANGUAGE_CONST, ROUTE_CONST, SETTINGS_CONST, PROJECT_SELECT_CONST, PROJECT_CONFIRMATION_DATA_CONST, SET_CROSS_DOMAIN_DATA, SET_REGISTERED_USER_TYPES, SET_ACTIVE_USER_TYPE, UPDATE_REGISTER_USER_FLAG, GUEST_USER, REMOVE_CROSS_DOMAIN_DATA, GET_USER, GET_USER_SUCCESSFULL, GET_USER_ERROR, REMOVE_USER, GET_USER_LOADING, GET_USER_PROFILE_IMAGE, UPDATE_USER_PROFILE_IMAGE, FREELANCER_CLIENT_AUTH_DATA, SAVE_PROJECT_DATA_CONST } from \"../constants/constant\";\nimport { postOptions, getOptions, postMultipartFile } from \"../../utils/httpConfig\";\nimport { ENDPOINT } from \"../../utils/endpoint\";\nimport request from \"../../utils/request\";\nexport function onReduxLangaugeChange(langauge) {\n  return dispatch => {\n    dispatch({\n      type: LANGUAGE_CONST,\n      payload: langauge\n    });\n  };\n}\nexport function changeSettings(settings) {\n  return dispatch => {\n    dispatch({\n      type: SETTINGS_CONST,\n      payload: settings\n    });\n  };\n}\nexport function onGuestUserChange(settings) {\n  return dispatch => {\n    dispatch({\n      type: GUEST_USER,\n      payload: settings\n    });\n  };\n}\nexport function onSetCrossDomainData(data) {\n  return dispatch => {\n    dispatch({\n      type: SET_CROSS_DOMAIN_DATA,\n      payload: data\n    });\n  };\n}\nexport function setRegisteredUserTypes(data) {\n  return dispatch => {\n    dispatch({\n      type: SET_REGISTERED_USER_TYPES,\n      payload: data\n    });\n  };\n}\nexport function setActiveUserType(userType) {\n  return dispatch => {\n    dispatch({\n      type: SET_ACTIVE_USER_TYPE,\n      payload: userType\n    });\n  };\n}\nexport function updateRegisteredUserFlag(data) {\n  return dispatch => {\n    dispatch({\n      type: UPDATE_REGISTER_USER_FLAG,\n      payload: data\n    });\n  };\n}\nexport function onSetClientFreelancerData(data) {\n  return dispatch => {\n    dispatch({\n      type: FREELANCER_CLIENT_AUTH_DATA,\n      payload: data\n    });\n  };\n}\nexport function onRemoveCrossDomainData() {\n  return dispatch => {\n    dispatch({\n      type: REMOVE_CROSS_DOMAIN_DATA\n    });\n  };\n}\nexport function onReduxRouteChange(route) {\n  return dispatch => {\n    dispatch({\n      type: ROUTE_CONST,\n      payload: route\n    });\n  };\n}\nexport function onReduxSelcteProjectChange(selectedProject) {\n  return dispatch => {\n    dispatch({\n      type: PROJECT_SELECT_CONST,\n      payload: selectedProject\n    });\n  };\n}\nexport function onReduxProjectConfirmationDataHandle(data) {\n  return dispatch => {\n    dispatch({\n      type: PROJECT_CONFIRMATION_DATA_CONST,\n      payload: data\n    });\n  };\n}\nexport function saveProjectDataRedux(key, data) {\n  return dispatch => {\n    dispatch({\n      type: SAVE_PROJECT_DATA_CONST,\n      payload: {\n        key,\n        data\n      }\n    });\n  };\n}\nexport function onSelectedChannelHandle(selected) {\n  return dispatch => {\n    dispatch({\n      type: SELECTED_CHANNEL,\n      payload: selected\n    });\n  };\n}\nexport function onMyChannelListHandle(list) {\n  return dispatch => {\n    dispatch({\n      type: MY_CHANNEL_LIST,\n      payload: list\n    });\n  };\n}\nexport function onGetUserDataSuccess(data) {\n  return dispatch => {\n    dispatch({\n      type: GET_USER_SUCCESSFULL,\n      payload: data\n    });\n  };\n}\nexport function onGetUserDataError(data) {\n  return dispatch => {\n    dispatch({\n      type: GET_USER_ERROR,\n      payload: data\n    });\n  };\n}\nexport function onRemoveUserData() {\n  return dispatch => {\n    dispatch({\n      type: REMOVE_USER\n    });\n  };\n}\nexport function onGetUserDataLoading() {\n  return dispatch => {\n    dispatch({\n      type: GET_USER_LOADING\n    });\n  };\n}\nexport function getUserProfileImage() {\n  return dispatch => {\n    dispatch({\n      type: GET_USER_PROFILE_IMAGE\n    });\n  };\n}\nexport const updateUserProfileImage = url => async (dispatch, getState) => {\n  return dispatch({\n    type: UPDATE_USER_PROFILE_IMAGE,\n    payload: url\n  });\n};","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/store/action/action.js"],"names":["SELECTED_CHANNEL","MY_CHANNEL_LIST","LANGUAGE_CONST","ROUTE_CONST","SETTINGS_CONST","PROJECT_SELECT_CONST","PROJECT_CONFIRMATION_DATA_CONST","SET_CROSS_DOMAIN_DATA","SET_REGISTERED_USER_TYPES","SET_ACTIVE_USER_TYPE","UPDATE_REGISTER_USER_FLAG","GUEST_USER","REMOVE_CROSS_DOMAIN_DATA","GET_USER","GET_USER_SUCCESSFULL","GET_USER_ERROR","REMOVE_USER","GET_USER_LOADING","GET_USER_PROFILE_IMAGE","UPDATE_USER_PROFILE_IMAGE","FREELANCER_CLIENT_AUTH_DATA","SAVE_PROJECT_DATA_CONST","postOptions","getOptions","postMultipartFile","ENDPOINT","request","onReduxLangaugeChange","langauge","dispatch","type","payload","changeSettings","settings","onGuestUserChange","onSetCrossDomainData","data","setRegisteredUserTypes","setActiveUserType","userType","updateRegisteredUserFlag","onSetClientFreelancerData","onRemoveCrossDomainData","onReduxRouteChange","route","onReduxSelcteProjectChange","selectedProject","onReduxProjectConfirmationDataHandle","saveProjectDataRedux","key","onSelectedChannelHandle","selected","onMyChannelListHandle","list","onGetUserDataSuccess","onGetUserDataError","onRemoveUserData","onGetUserDataLoading","getUserProfileImage","updateUserProfileImage","url","getState"],"mappings":"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","sourcesContent":["import {\n    SELECTED_CHANNEL,\n    MY_CHANNEL_LIST,\n    LANGUAGE_CONST,\n    ROUTE_CONST,\n    SETTINGS_CONST,\n    PROJECT_SELECT_CONST,\n    PROJECT_CONFIRMATION_DATA_CONST,\n    SET_CROSS_DOMAIN_DATA,\n    SET_REGISTERED_USER_TYPES,SET_ACTIVE_USER_TYPE,\n    UPDATE_REGISTER_USER_FLAG,\n    GUEST_USER,\n    REMOVE_CROSS_DOMAIN_DATA,\n    GET_USER,\n    GET_USER_SUCCESSFULL,\n    GET_USER_ERROR,\n    REMOVE_USER,\n    GET_USER_LOADING,\n    GET_USER_PROFILE_IMAGE,\n    UPDATE_USER_PROFILE_IMAGE,\n    FREELANCER_CLIENT_AUTH_DATA,\n    SAVE_PROJECT_DATA_CONST\n} from \"../constants/constant\";\nimport { postOptions, getOptions, postMultipartFile } from \"../../utils/httpConfig\";\nimport { ENDPOINT } from \"../../utils/endpoint\";\nimport request from \"../../utils/request\";\n\nexport function onReduxLangaugeChange(langauge) {\n    return (dispatch) => {\n        dispatch({\n            type: LANGUAGE_CONST,\n            payload: langauge\n        })\n    }\n}\n\nexport function changeSettings(settings){\n    return(dispatch)=>{\n        dispatch({\n            type: SETTINGS_CONST,\n            payload:settings\n        }) \n    }\n}\n\n\nexport function onGuestUserChange(settings){\n    return(dispatch)=>{\n        dispatch({\n            type: GUEST_USER,\n            payload:settings\n        }) \n    }\n}\n\n\n\nexport function onSetCrossDomainData(data) {\n    \n    return(dispatch)=> {\n        dispatch({\n            type:SET_CROSS_DOMAIN_DATA,\n            payload:data,\n        })\n    }\n}\nexport function setRegisteredUserTypes(data) {\n    \n    return(dispatch)=> {\n        dispatch({\n            type:SET_REGISTERED_USER_TYPES,\n            payload:data,\n        })\n    }\n}\nexport function setActiveUserType(userType) {\n    \n    return(dispatch)=> {\n        dispatch({\n            type:SET_ACTIVE_USER_TYPE,\n            payload:userType,\n        })\n    }\n}\nexport function updateRegisteredUserFlag(data) {\n    \n    return(dispatch)=> {\n        dispatch({\n            type:UPDATE_REGISTER_USER_FLAG,\n            payload:data,\n        })\n    }\n}\nexport function onSetClientFreelancerData(data) {\n    \n    return(dispatch)=> {\n        dispatch({\n            type:FREELANCER_CLIENT_AUTH_DATA,\n            payload:data,\n        })\n    }\n}\n\nexport function onRemoveCrossDomainData() {\n    \n    return(dispatch)=> {\n        dispatch({\n            type:REMOVE_CROSS_DOMAIN_DATA,\n        })\n    }\n}\n\nexport function onReduxRouteChange(route) {\n    return (dispatch) => {\n        dispatch({\n            type: ROUTE_CONST,\n            payload: route\n        })\n    }\n}\nexport function onReduxSelcteProjectChange(selectedProject) {\n    return (dispatch) => {\n        dispatch({\n            type: PROJECT_SELECT_CONST,\n            payload: selectedProject\n        })\n    }\n}\n\nexport function onReduxProjectConfirmationDataHandle(data) {\n    return (dispatch) => {\n        dispatch({\n            type: PROJECT_CONFIRMATION_DATA_CONST,\n            payload: data\n        })\n    }\n}\n\nexport function saveProjectDataRedux(key, data) {\n    return (dispatch) => {\n        dispatch({\n            type: SAVE_PROJECT_DATA_CONST,\n            payload: {key, data}\n        })\n    }\n}\n\nexport function onSelectedChannelHandle(selected){\n  return(dispatch)=>{\n      dispatch({\n          type: SELECTED_CHANNEL,\n          payload:selected\n      }) \n  }\n}\n\nexport function onMyChannelListHandle(list){\n  return(dispatch)=>{\n      dispatch({\n          type: MY_CHANNEL_LIST,\n          payload:list\n      }) \n  }\n}\n\nexport function onGetUserDataSuccess(data) {\n    return (dispatch) => {\n        dispatch({\n            type: GET_USER_SUCCESSFULL,\n            payload: data\n        })\n    }\n}\n\nexport function onGetUserDataError(data) {\n    return (dispatch) => {\n        dispatch({\n            type: GET_USER_ERROR,\n            payload: data\n        })\n    }\n}\n\nexport function onRemoveUserData() {\n    return (dispatch) => {\n        dispatch({\n            type: REMOVE_USER,\n        })\n    }\n}\n\nexport function onGetUserDataLoading() {\n    return (dispatch) => {\n        dispatch({\n            type: GET_USER_LOADING,\n        })\n    }\n}\n\nexport function getUserProfileImage() {\n    return (dispatch) => {\n        dispatch({\n            type: GET_USER_PROFILE_IMAGE,\n        })\n    }\n}\n\nexport const updateUserProfileImage = (url) => async (dispatch, getState) => {\n    return dispatch({\n        type: UPDATE_USER_PROFILE_IMAGE,\n        payload: url\n    });\n}\n"]},"metadata":{},"sourceType":"module"}