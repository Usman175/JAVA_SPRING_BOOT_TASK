{"ast":null,"code":"var _jsxFileName = \"/var/www/php74/bearolefrontend/src/container/project/projectpost/projectPost.jsx\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport DropdownList from \"../../../components/dropdowns/dropdownList\";\nimport Heading from \"../../../components/postProject/heading\";\nimport HelpInfo from \"../../../components/postProject/helpInfo\";\nimport Label from \"../../../components/postProject/label\";\nimport PaymentInfo from \"../../../components/postProject/paymentInfo\";\nimport TipsInfo from \"../../../components/postProject/tips\";\nimport Radio from \"../../../components/radioButton/radio\";\nimport notifications from \"../../../utils/notifications\";\nimport RightBottom from \"../../../components/rightbar/rightBottom\";\nimport RightTop from \"../../../components/rightbar/rightTop\";\nimport { projectPost_updateField as updateField, projectPost_updateProjectScope as updateProjectScope, projectPost_updateProjectSubScope as updateProjectSubScope, projectPost_updateProjectType as updateProjectType, projectPost_updateSelectedServices as updateServices } from \"../../../store/action/Project/projectActions\";\nimport { GET_IMAGE_PREFIX } from \"../../../store/constants/constant\";\nimport { ENDPOINT } from \"../../../utils/endpoint\";\nimport { selectSubScopes } from \"../../../utils/helpers\";\nimport { getOptions, postOptions } from \"../../../utils/httpConfig\";\nimport { ProjectType, ProjectTypeConst } from \"../../../utils/projectConst\";\nimport request from \"../../../utils/request\";\nimport SkeletonProjectPost from \"./skeletonProjectPost\";\nimport Skeleton from \"../../../components/skeleton/skeleton\";\nimport SubHeader from \"../../../components/subHeader\";\nimport \"./projectPost.scss\";\n\nclass ProjectPost extends Component {\n  constructor(props) {\n    var _props$authUser, _props$authUser$myAut, _props$authUser$myAut2, _this$props$authUser, _this$props$authUser$;\n\n    super(props);\n\n    this.setSign = sign => {\n      this.setState({\n        sign\n      });\n    };\n\n    this.getServicesByCategories = async () => {\n      let result = await request(`${ENDPOINT[\"GetServicesByCategory\"]}?category=Project`, getOptions({}));\n\n      if (result.success) {\n        this.setState({\n          services: result.result\n        });\n      }\n    };\n\n    this.onProjectTypeChange = projectType => {\n      this.props.updateProjectType(projectType);\n    };\n\n    this.onProjectScopeChange = projectScope => {\n      this.props.updateProjectScope(projectScope);\n      this.setState({\n        projectSubScopes: selectSubScopes(projectScope, this.props.languageReducer.projectScopes)\n      });\n    };\n\n    this.onProjectSubScopeChange = projectSubScope => {\n      this.props.updateProjectSubScope(projectSubScope);\n    };\n\n    this.onHelpInfoFieldChange = (field, value) => {\n      this.props.updateField(field, value);\n    };\n\n    this.postTypeHandle = postType => {\n      this.setState({\n        postType: postType\n      });\n    };\n\n    this.state = {\n      postUserId: (_props$authUser = props.authUser) === null || _props$authUser === void 0 ? void 0 : (_props$authUser$myAut = _props$authUser.myAuth) === null || _props$authUser$myAut === void 0 ? void 0 : (_props$authUser$myAut2 = _props$authUser$myAut.user) === null || _props$authUser$myAut2 === void 0 ? void 0 : _props$authUser$myAut2.userId,\n      clientId: (_this$props$authUser = this.props.authUser) === null || _this$props$authUser === void 0 ? void 0 : (_this$props$authUser$ = _this$props$authUser.clientAuth) === null || _this$props$authUser$ === void 0 ? void 0 : _this$props$authUser$.clientId,\n      postType: \"newPost\",\n      projectType: \"\",\n      sign: '',\n      selectedProject: \"\",\n      existingPost: \"\",\n      errorMessage: {},\n      projectTypes: [],\n      isSkeletonLoading: false,\n      existingProjects: [],\n      projects: [],\n      defaultRegion: null,\n      projectScope: \"\",\n      projectSubScope: \"\",\n      projectSubScopes: [],\n      loading: false,\n      ExistingProjectOptionsFlag: false,\n      services: []\n    };\n  }\n\n  componentWillMount() {\n    this.bindExistingProjects(); //Check Default Address and Get Region\n\n    this.bindDefaultAddress();\n  }\n\n  componentDidMount() {\n    if (this.props.projectPost.projectScope) {\n      this.setState({\n        projectSubScopes: selectSubScopes(this.props.projectPost.projectScope, this.props.languageReducer.projectScopes)\n      });\n    }\n\n    this.findProjectIfExist();\n    this.getServicesByCategories();\n  } // getting services from database\n\n\n  async findProjectIfExist() {\n    let projectId = new URLSearchParams(this.props.location.search).get(\"id\");\n\n    if (projectId && !this.props.projectPost.projectType) {\n      let result = await request(`${ENDPOINT[\"GetProject\"]}?projectId=${projectId}`, getOptions({}));\n\n      if (result.success) {\n        this.setState({\n          postType: \"useExisting\",\n          existingPost: projectId,\n          ExistingProjectOptionsFlag: true\n        });\n        this.props.updateProjectType(result.result.projectType);\n        this.props.updateProjectScope(result.result.projectScope.projectScope);\n        this.props.updateProjectSubScope(result.result.projectScope.projectSubscope);\n        this.setState({\n          projectSubScopes: selectSubScopes(result.result.projectScope.projectScope, this.props.languageReducer.projectScopes)\n        });\n        this.props.updateField(\"isNeededSearchAssistant\", result.result.isNeededSearchAssistant);\n        this.props.updateField(\"isNeededNDA\", result.result.isNeededNDA);\n        this.props.updateField(\"isNeededUrgent\", result.result.isNeededUrgent);\n      }\n    }\n  } //#region Bind Methods\n\n\n  async bindDefaultAddress() {\n    let param = {\n      userId: this.state.postUserId\n    };\n    let result = await request(ENDPOINT[\"GetUserAddress\"], postOptions(param));\n\n    if (result.success) {\n      if (result.result.length > 0) {\n        let defaultLocation = result.result.filter(item => item.isDefault === true);\n\n        if (defaultLocation != null) {\n          if (defaultLocation.length > 0) {\n            this.setState({\n              defaultRegion: defaultLocation[0].regionId\n            });\n          }\n        }\n      }\n    }\n  }\n\n  async bindExistingProjects() {\n    this.setState({\n      isSkeletonLoading: true\n    });\n    let array = [];\n    let result = await request(`${ENDPOINT[\"GetClientProjects\"]}?postUserId=${this.state.postUserId}&projectTypes=&projectStatus=&projectStatus=&projectScope=&search=&pageNumber=1&pageSize=1000`, getOptions({}));\n\n    if (result.success && result.result.entries) {\n      for (let index = 0; index < result.result.entries.length; index++) {\n        const element = result.result.entries[index];\n\n        if (element.jobTitle && element.jobTitle != \" \" && element.projectId) {\n          array.push({\n            text: element.jobTitle,\n            value: element.projectId.toString()\n          });\n        }\n      }\n\n      this.setState({\n        projects: result.result.entries\n      });\n      this.setState({\n        existingProjects: array,\n        isSkeletonLoading: false\n      });\n    } else {\n      this.setState({\n        isSkeletonLoading: false\n      });\n    }\n  } //#endregion Bind Methods\n  //#region Validate Methods\n\n\n  handleValidation() {\n    let {\n      languageType\n    } = this.props;\n    let postType = this.state.postType;\n    let errorMessage = {};\n    let formIsValid = true;\n    const {\n      projectType,\n      projectScope,\n      projectSubScope\n    } = this.props.projectPost;\n\n    if (!projectType) {\n      formIsValid = false;\n      errorMessage[\"projectType\"] = languageType.REQUIRED_MESSAGE;\n    } else if (!projectScope && this.props.projectPost.projectType != ProjectType.Contest) {\n      formIsValid = false;\n      errorMessage[\"projectScope\"] = languageType.REQUIRED_MESSAGE;\n    } else if (!projectSubScope && this.props.projectPost.projectType != ProjectType.Contest) {\n      formIsValid = false;\n      errorMessage[\"projectSubScope\"] = languageType.REQUIRED_MESSAGE;\n    } else if (postType === \"useExisting\" && (!this.state.existingPost || this.state.existingPost === null || this.state.existingPost === \"\")) {\n      formIsValid = false;\n      errorMessage[\"existingPost\"] = languageType.REQUIRED_MESSAGE;\n    } else if (!this.props.projectPost.selectedServices.find(service => service.subCategory === \"Boost visibility\")) {\n      formIsValid = false;\n      notifications.showError(\"You must select at least one Service from boost visibility\");\n    } else if (!this.props.projectPost.isNeededNDA && (!this.props.projectPost.isNeededNDA || this.props.projectPost.isNeededNDA === null || this.props.projectPost.isNeededNDA === \"\")) {\n      formIsValid = false;\n      notifications.showError(\"You must sign up NDA form to move on\");\n    }\n\n    this.setState({\n      errorMessage: errorMessage\n    });\n    return formIsValid;\n  }\n\n  handleChange(fieldData, e, value) {\n    /* debugger; */\n    let errorMessage = {};\n    this.state.projectScope = \"\";\n\n    if (fieldData === \"existingPost\") {\n      this.state.existingPost = value || e.target.value;\n      var selectedProject = this.state.projects.filter(x => x.projectId === this.state.existingPost);\n\n      if (selectedProject.length > 0) {\n        this.state.projectType = selectedProject[0].projectType;\n        this.state.projectScope = selectedProject[0].projectScope;\n      }\n    }\n\n    if (this.state.existingPost !== 0 && this.state.existingPost !== \"\" && this.state.existingPost !== null && this.state.existingPost !== undefined) errorMessage[\"existingPost\"] = null;\n    this.setState({\n      errorMessage: errorMessage\n    });\n  } //#endregion Validate Methods\n\n\n  async onPageRedirectHandle() {\n    const {\n      projectType,\n      projectScope,\n      projectSubScope,\n      isNeededSearchAssistant,\n      isNeededNDA,\n      isNeededUrgent,\n      selectedServices\n    } = this.props.projectPost;\n\n    if (this.handleValidation()) {\n      this.setState({\n        loading: true\n      });\n\n      if (this.props.projectPost.projectType != ProjectType.Contest) {\n        if (this.state.postType === \"useExisting\") {\n          var _this$props$authUser2, _this$props$authUser3;\n\n          let param = {\n            projectId: this.state.existingPost,\n            postUserId: this.state.clientId,\n            projectType: projectType,\n            projectScope: {\n              projectScope: projectScope,\n              projectSubScope: projectSubScope\n            },\n            isNeededSearchAssistant,\n            isNeededNDA,\n            isNeededUrgent,\n            // freelancersEmailAddresses:'',\n            // offeredMilestones:'',\n            regionId: this.state.defaultRegion ? this.state.defaultRegion : (_this$props$authUser2 = this.props.authUser) === null || _this$props$authUser2 === void 0 ? void 0 : (_this$props$authUser3 = _this$props$authUser2.myRegion) === null || _this$props$authUser3 === void 0 ? void 0 : _this$props$authUser3.regionName\n          };\n          let result = await request(ENDPOINT[\"UpdateProjectInitStep\"], postOptions(param));\n          let redirectTo =\n          /*  this.state.postType === \"useExisting\"\n            ? \"/confirm-project?id=\" + this.state.existingPost\n            : */\n          this.props.projectPost.projectType != ProjectType.Contest ? \"/project-post-details?id=\" + this.state.existingPost : \"/post-contest-project?id=\" + this.state.existingPost;\n          this.setState({\n            loading: false\n          });\n          this.props.history.push(redirectTo);\n        } else {\n          let param = {\n            projectId: \"\",\n            postUserId: this.state.clientId,\n            projectType: projectType,\n            projectScope: {\n              projectScope: projectScope,\n              projectSubScope: projectSubScope\n            },\n            isNeededSearchAssistant,\n            isNeededNDA,\n            isNeededUrgent,\n            services: !isNeededNDA ? selectedServices : selectedServices.concat([this.state.services.NDA[0]])\n          };\n          let result = await request(ENDPOINT[\"CreateProject\"], postOptions(param));\n          let redirectTo = this.state.postType === \"useExisting\" ? \"/confirm-project?id=\" + result.result : this.props.projectPost.projectType != ProjectType.Contest ? \"/project-post-details?id=\" + result.result : \"/post-contest-project?id=\" + result.result;\n          this.setState({\n            loading: false\n          });\n          this.props.history.push(redirectTo);\n        }\n      } else {\n        this.props.history.push(\"/post-contest-project\");\n      }\n    }\n  }\n\n  render() {\n    var _this$props$languageR;\n\n    let {\n      languageType,\n      languageReducer,\n      authUser\n    } = this.props;\n    let {\n      postType,\n      ExistingProjectOptionsFlag,\n      isSkeletonLoading,\n      services\n    } = this.state;\n    const {\n      projectPost\n    } = this.props;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(SubHeader, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"section\", {\n      className: \"card_sec\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"bcknd_container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 374,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 375,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-2\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 376,\n        columnNumber: 15\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-xl-8 col-lg-12 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(SkeletonProjectPost, {\n      count: 1,\n      isSkeletonLoading: isSkeletonLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 378,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"skeletonLoading_mobile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Skeleton, {\n      count: 4,\n      isSkeletonLoading: isSkeletonLoading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 19\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      hidden: isSkeletonLoading,\n      className: \"project_post \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 389,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(Heading, {\n      heading: languageType.POST_A_PROJECT,\n      icon: \"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/post_sticky.svg\",\n      color: \"#333333\",\n      fontSize: \"26px\",\n      fontWeight: \"600\",\n      fontFamily: \"Raleway\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 390,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(\"form\", {\n      className: \"post_form border-top-0\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 399,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 400,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 402,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      title: languageType.SELECT_PROJECTY_TYPE,\n      compulsory: true,\n      question: true,\n      prefixBoxValid: this.state.errorMessage[\"projectType\"] ? false : true,\n      prefixBoxInValid: this.state.errorMessage[\"projectType\"] ? true : false,\n      primary: true,\n      icon: \"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/preferences_project.svg\",\n      color: \"#333333\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 403,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 421,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(DropdownList, {\n      id: \"projectType\",\n      name: \"projectType\",\n      enableAutoCompleteSearch: true,\n      placeholder: \"projectType\",\n      value: projectPost.projectType,\n      items: this.props.languageReducer.projectTypes,\n      selectItem: this.onProjectTypeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 422,\n        columnNumber: 29\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 432,\n        columnNumber: 27\n      }\n    }, this.state.errorMessage[\"projectType\"])), projectPost.projectType != ProjectType.Contest ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      title: languageType.SELECT_BUSINESS_SCOPE,\n      compulsory: true,\n      prefixBoxValid: this.state.errorMessage[\"projectScope\"] ? false : true,\n      prefixBoxInValid: this.state.errorMessage[\"projectScope\"] ? true : false,\n      primary: true,\n      icon: \"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/scope_target.svg\",\n      color: \"#333333\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(DropdownList, {\n      id: \"projectScope\",\n      name: \"projectScope\",\n      enableAutoCompleteSearch: true,\n      placeholder: \"Select the scope of business\",\n      value: projectPost.projectScope,\n      items: (_this$props$languageR = this.props.languageReducer.projectScopes) === null || _this$props$languageR === void 0 ? void 0 : _this$props$languageR.filter(item => item.value != \"others\"),\n      selectItem: this.onProjectScopeChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 456,\n        columnNumber: 31\n      }\n    })), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 468,\n        columnNumber: 29\n      }\n    }, this.state.errorMessage[\"projectScope\"])) : null, projectPost.projectType != ProjectType.Contest ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 474,\n        columnNumber: 27\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      title: languageType.SELECT_SUB_BUSINESS_SCOPE,\n      compulsory: true,\n      prefixBoxValid: this.state.errorMessage[\"projectSubScope\"] ? false : true,\n      prefixBoxInValid: this.state.errorMessage[\"projectSubScope\"] ? true : false,\n      primary: true,\n      icon: \"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/subScopeIcon.svg\",\n      color: \"#333333\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 475,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(DropdownList, {\n      id: \"projectSubScope\",\n      name: \"projectSubScope\",\n      placeholder: \"Select the sub scope of business\",\n      enableAutoCompleteSearch: true,\n      disabled: !projectPost.projectScope,\n      value: projectPost.projectSubScope,\n      selectItem: this.onProjectSubScopeChange,\n      items: this.state.projectSubScopes,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 29\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 503,\n        columnNumber: 29\n      }\n    }, this.state.errorMessage[\"projectSubScope\"])) : null, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 508,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      handleSelect: this.postTypeHandle,\n      name: \"posType\",\n      id: \"s-option\",\n      value: \"newPost\",\n      checked: postType === \"newPost\",\n      label: languageType.CREATE_A_NEW_POST,\n      compulsory: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group custom-hidden-area\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 519,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      handleSelect: () => {},\n      name: \"posType\",\n      id: \"s-option8\",\n      value: \"newPost1\",\n      checked: false,\n      label: languageType.CREATE_A_NEW_POST,\n      compulsory: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 520,\n        columnNumber: 27\n      }\n    })), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"form-group\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Radio, {\n      handleSelect: this.postTypeHandle,\n      name: \"posType\",\n      id: \"s-option1\",\n      value: \"useExisting\",\n      checked: postType === \"useExisting\",\n      label: languageType.REUSING_EXISTING_A_POST,\n      compulsory: false,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(DropdownList, {\n      id: \"existingPost\",\n      name: \"existingPost\",\n      enableAutoCompleteSearch: true,\n      value: this.state.existingPost,\n      selectItem: value => {\n        this.handleChange(\"existingPost\", null, value);\n      },\n      disabled: postType !== \"useExisting\" || ExistingProjectOptionsFlag,\n      items: this.state.existingProjects,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 540,\n        columnNumber: 27\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      className: \"error\",\n      hidden: postType !== \"useExisting\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 554,\n        columnNumber: 27\n      }\n    }, this.state.errorMessage[\"existingPost\"])), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btnSpaceTop save_cancel text-right NextBtnProjectPostPc\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 561,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn contest-project-post-btn\",\n      onClick: () => this.onPageRedirectHandle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 562,\n        columnNumber: 27\n      }\n    }, languageType.NEXT_TEXT, \" \", /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/arrowDirection.svg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 568,\n        columnNumber: 29\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-spinner fa-spin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 570,\n        columnNumber: 31\n      }\n    }) : \"\"))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 577,\n        columnNumber: 23\n      }\n    }, /*#__PURE__*/React.createElement(PaymentInfo, {\n      projectType: projectPost.projectType === \"\" ? ProjectTypeConst.Milestone : projectPost.projectType,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 578,\n        columnNumber: 25\n      }\n    }), projectPost.projectType === \"\" ? /*#__PURE__*/React.createElement(TipsInfo, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 585,\n        columnNumber: 59\n      }\n    }) : null, /*#__PURE__*/React.createElement(HelpInfo, {\n      isNeededSearchAssistant: projectPost.isNeededSearchAssistant,\n      isNeededNDA: projectPost.isNeededNDA,\n      isNeededUrgent: projectPost.isNeededUrgent,\n      onFieldChange: this.onHelpInfoFieldChange,\n      setSign: this.setSign,\n      sign: this.state.sign,\n      services: services,\n      projectPost: projectPost,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 587,\n        columnNumber: 25\n      }\n    }), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"btnSpaceTop save_cancel text-right NextBtnProjectPostMobile\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 600,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"button\", {\n      type: \"button\",\n      className: \"btn contest-project-post-btn\",\n      onClick: () => this.onPageRedirectHandle(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 601,\n        columnNumber: 27\n      }\n    }, languageType.NEXT_TEXT, \" \", /*#__PURE__*/React.createElement(\"img\", {\n      src: \"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/arrowDirection.svg\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 607,\n        columnNumber: 29\n      }\n    }), this.state.loading ? /*#__PURE__*/React.createElement(\"i\", {\n      className: \"fa fa-spinner fa-spin\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 31\n      }\n    }) : \"\"))))))), /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-lg-2 col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 659,\n        columnNumber: 15\n      }\n    })))));\n  }\n\n}\n\nfunction mapStateToProps(state) {\n  return {\n    languageType: state.languageReducer.languageType,\n    languageReducer: state.languageReducer,\n    authUser: state.authReducer,\n    projectPost: state.projectStore.projectPost\n  };\n}\n\nexport default connect(mapStateToProps, {\n  updateField,\n  updateProjectType,\n  updateProjectScope,\n  updateProjectSubScope,\n  updateServices\n})(ProjectPost);","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/container/project/projectpost/projectPost.jsx"],"names":["React","Component","connect","DropdownList","Heading","HelpInfo","Label","PaymentInfo","TipsInfo","Radio","notifications","RightBottom","RightTop","projectPost_updateField","updateField","projectPost_updateProjectScope","updateProjectScope","projectPost_updateProjectSubScope","updateProjectSubScope","projectPost_updateProjectType","updateProjectType","projectPost_updateSelectedServices","updateServices","GET_IMAGE_PREFIX","ENDPOINT","selectSubScopes","getOptions","postOptions","ProjectType","ProjectTypeConst","request","SkeletonProjectPost","Skeleton","SubHeader","ProjectPost","constructor","props","setSign","sign","setState","getServicesByCategories","result","success","services","onProjectTypeChange","projectType","onProjectScopeChange","projectScope","projectSubScopes","languageReducer","projectScopes","onProjectSubScopeChange","projectSubScope","onHelpInfoFieldChange","field","value","postTypeHandle","postType","state","postUserId","authUser","myAuth","user","userId","clientId","clientAuth","selectedProject","existingPost","errorMessage","projectTypes","isSkeletonLoading","existingProjects","projects","defaultRegion","loading","ExistingProjectOptionsFlag","componentWillMount","bindExistingProjects","bindDefaultAddress","componentDidMount","projectPost","findProjectIfExist","projectId","URLSearchParams","location","search","get","projectSubscope","isNeededSearchAssistant","isNeededNDA","isNeededUrgent","param","length","defaultLocation","filter","item","isDefault","regionId","array","entries","index","element","jobTitle","push","text","toString","handleValidation","languageType","formIsValid","REQUIRED_MESSAGE","Contest","selectedServices","find","service","subCategory","showError","handleChange","fieldData","e","target","x","undefined","onPageRedirectHandle","myRegion","regionName","redirectTo","history","concat","NDA","render","POST_A_PROJECT","SELECT_PROJECTY_TYPE","SELECT_BUSINESS_SCOPE","SELECT_SUB_BUSINESS_SCOPE","CREATE_A_NEW_POST","REUSING_EXISTING_A_POST","NEXT_TEXT","Milestone","mapStateToProps","authReducer","projectStore"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport DropdownList from \"../../../components/dropdowns/dropdownList\";\nimport Heading from \"../../../components/postProject/heading\";\nimport HelpInfo from \"../../../components/postProject/helpInfo\";\nimport Label from \"../../../components/postProject/label\";\nimport PaymentInfo from \"../../../components/postProject/paymentInfo\";\nimport TipsInfo from \"../../../components/postProject/tips\";\nimport Radio from \"../../../components/radioButton/radio\";\nimport notifications from \"../../../utils/notifications\"; \nimport RightBottom from \"../../../components/rightbar/rightBottom\";\nimport RightTop from \"../../../components/rightbar/rightTop\";\nimport {\n  projectPost_updateField as updateField,\n  projectPost_updateProjectScope as updateProjectScope,\n  projectPost_updateProjectSubScope as updateProjectSubScope,\n  projectPost_updateProjectType as updateProjectType,\n  projectPost_updateSelectedServices as updateServices,\n} from \"../../../store/action/Project/projectActions\";\nimport { GET_IMAGE_PREFIX } from \"../../../store/constants/constant\";\nimport { ENDPOINT } from \"../../../utils/endpoint\";\nimport { selectSubScopes } from \"../../../utils/helpers\";\nimport { getOptions, postOptions } from \"../../../utils/httpConfig\";\nimport { ProjectType, ProjectTypeConst } from \"../../../utils/projectConst\";\nimport request from \"../../../utils/request\";\nimport SkeletonProjectPost from \"./skeletonProjectPost\";\nimport Skeleton from \"../../../components/skeleton/skeleton\";\nimport SubHeader from \"../../../components/subHeader\";\nimport \"./projectPost.scss\";\nclass ProjectPost extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      postUserId: props.authUser?.myAuth?.user?.userId,\n      clientId: this.props.authUser?.clientAuth?.clientId,\n      postType: \"newPost\",\n      projectType: \"\",\n      sign:'',\n      selectedProject: \"\",\n      existingPost: \"\",\n      errorMessage: {},\n      projectTypes: [],\n      isSkeletonLoading: false,\n\n      existingProjects: [],\n      projects: [],\n      defaultRegion: null,\n      projectScope: \"\",\n      projectSubScope: \"\",\n      projectSubScopes: [],\n      loading: false,\n      ExistingProjectOptionsFlag: false,\n      services:[]\n    };\n  }\n  setSign=(sign)=>{\n    this.setState({sign})\n  }\n\n  componentWillMount() {\n    this.bindExistingProjects();\n    //Check Default Address and Get Region\n    this.bindDefaultAddress();\n  }\n\n  componentDidMount() {\n    if (this.props.projectPost.projectScope) {\n      this.setState({\n        projectSubScopes: selectSubScopes(\n          this.props.projectPost.projectScope,\n          this.props.languageReducer.projectScopes\n        ),\n      });\n    }\n\n    this.findProjectIfExist();\n    this.getServicesByCategories()\n  }\n\n  // getting services from database\n  getServicesByCategories=async ()=>{  \n    let result = await request(\n      `${ENDPOINT[\"GetServicesByCategory\"]}?category=Project`,\n      getOptions({})\n    );\n    if (result.success) {\n      this.setState({services:result.result})\n    }\n  }\n\n\n  async findProjectIfExist() {\n    let projectId = new URLSearchParams(this.props.location.search).get(\"id\");\n    if (projectId && !this.props.projectPost.projectType) {\n      let result = await request(\n        `${ENDPOINT[\"GetProject\"]}?projectId=${projectId}`,\n        getOptions({})\n      );\n      if (result.success) {\n        this.setState({\n          postType: \"useExisting\",\n          existingPost: projectId,\n          ExistingProjectOptionsFlag: true,\n        });\n        this.props.updateProjectType(result.result.projectType);\n        this.props.updateProjectScope(result.result.projectScope.projectScope);\n        this.props.updateProjectSubScope(\n          result.result.projectScope.projectSubscope\n        );\n        this.setState({\n          projectSubScopes: selectSubScopes(\n            result.result.projectScope.projectScope,\n            this.props.languageReducer.projectScopes\n          ),\n        });\n        this.props.updateField(\n          \"isNeededSearchAssistant\",\n          result.result.isNeededSearchAssistant\n        );\n        this.props.updateField(\"isNeededNDA\", result.result.isNeededNDA);\n        this.props.updateField(\"isNeededUrgent\", result.result.isNeededUrgent);\n      }\n    }\n  }\n  //#region Bind Methods\n\n  async bindDefaultAddress() {\n    let param = {\n      userId: this.state.postUserId,\n    };\n\n    let result = await request(ENDPOINT[\"GetUserAddress\"], postOptions(param));\n\n    if (result.success) {\n      if (result.result.length > 0) {\n        let defaultLocation = result.result.filter(\n          (item) => item.isDefault === true\n        );\n\n        if (defaultLocation != null) {\n          if (defaultLocation.length > 0) {\n            this.setState({ defaultRegion: defaultLocation[0].regionId });\n          }\n        }\n      }\n    }\n  }\n\n  async bindExistingProjects() {\n    this.setState({ isSkeletonLoading: true});\n    let array = [];\n    let result = await request(\n      `${ENDPOINT[\"GetClientProjects\"]}?postUserId=${this.state.postUserId}&projectTypes=&projectStatus=&projectStatus=&projectScope=&search=&pageNumber=1&pageSize=1000`,\n      getOptions({})\n    );\n    if (result.success && result.result.entries) {\n      for (let index = 0; index < result.result.entries.length; index++) {\n        const element = result.result.entries[index];\n        if (element.jobTitle && element.jobTitle != \" \" && element.projectId) {\n          array.push({\n            text: element.jobTitle,\n            value: element.projectId.toString(),\n          });\n        }\n      }\n      this.setState({ projects: result.result.entries });\n      this.setState({ existingProjects: array, isSkeletonLoading: false });\n    } else{ \n    this.setState({ isSkeletonLoading: false });\n    }\n  }\n\n  //#endregion Bind Methods\n\n  //#region Validate Methods\n\n  handleValidation() {\n    let { languageType } = this.props;\n    let postType = this.state.postType;\n    let errorMessage = {};\n    let formIsValid = true;\n\n    const { projectType, projectScope, projectSubScope } =\n      this.props.projectPost;\n\n    if (!projectType) {\n      formIsValid = false;\n      errorMessage[\"projectType\"] = languageType.REQUIRED_MESSAGE;\n    } else if (\n      !projectScope &&\n      this.props.projectPost.projectType != ProjectType.Contest\n    ) {\n      formIsValid = false;\n      errorMessage[\"projectScope\"] = languageType.REQUIRED_MESSAGE;\n    } else if (\n      !projectSubScope &&\n      this.props.projectPost.projectType != ProjectType.Contest\n    ) {\n      formIsValid = false;\n      errorMessage[\"projectSubScope\"] = languageType.REQUIRED_MESSAGE;\n    } else if (\n      postType === \"useExisting\" &&\n      (!this.state.existingPost ||\n        this.state.existingPost === null ||\n        this.state.existingPost === \"\")\n    ) {\n      formIsValid = false;\n      errorMessage[\"existingPost\"] = languageType.REQUIRED_MESSAGE;\n    } else if (\n      !this.props.projectPost.selectedServices.find((service)=>service.subCategory===\"Boost visibility\")\n    ) {\n      formIsValid = false;\n      notifications.showError(\"You must select at least one Service from boost visibility\"); \n    } else if (\n      !this.props.projectPost.isNeededNDA &&\n      (!this.props.projectPost.isNeededNDA ||\n        this.props.projectPost.isNeededNDA === null ||\n        this.props.projectPost.isNeededNDA === \"\")\n    ) {\n      formIsValid = false; notifications.showError(\"You must sign up NDA form to move on\"); \n    }\n\n    this.setState({ errorMessage: errorMessage });\n\n    return formIsValid;\n  }\n\n  onProjectTypeChange = (projectType) => {\n    this.props.updateProjectType(projectType);\n  };\n\n  onProjectScopeChange = (projectScope) => {\n    this.props.updateProjectScope(projectScope);\n    this.setState({\n      projectSubScopes: selectSubScopes(\n        projectScope,\n        this.props.languageReducer.projectScopes\n      ),\n    });\n  };\n\n  onProjectSubScopeChange = (projectSubScope) => {\n    this.props.updateProjectSubScope(projectSubScope);\n  };\n\n  onHelpInfoFieldChange = (field, value) => {\n    this.props.updateField(field, value);\n\n  };\n\n  handleChange(fieldData, e, value) {\n    /* debugger; */\n    let errorMessage = {};\n    this.state.projectScope = \"\";\n    if (fieldData === \"existingPost\") {\n      this.state.existingPost = value || e.target.value;\n      var selectedProject = this.state.projects.filter(\n        (x) => x.projectId === this.state.existingPost\n      );\n      if (selectedProject.length > 0) {\n        this.state.projectType = selectedProject[0].projectType;\n        this.state.projectScope = selectedProject[0].projectScope;\n      }\n    }\n\n    if (\n      this.state.existingPost !== 0 &&\n      this.state.existingPost !== \"\" &&\n      this.state.existingPost !== null &&\n      this.state.existingPost !== undefined\n    )\n      errorMessage[\"existingPost\"] = null;\n\n    this.setState({ errorMessage: errorMessage });\n  }\n\n  //#endregion Validate Methods\n\n  async onPageRedirectHandle() { \n    const {\n      projectType,\n      projectScope,\n      projectSubScope,\n      isNeededSearchAssistant,\n      isNeededNDA,\n      isNeededUrgent,\n      selectedServices\n    } = this.props.projectPost;\n    if (this.handleValidation()) {\n      this.setState({ loading: true});\n      if (this.props.projectPost.projectType != ProjectType.Contest) {\n        if (this.state.postType === \"useExisting\") {\n          let param = {\n            projectId: this.state.existingPost,\n            postUserId: this.state.clientId,\n            projectType: projectType,\n            projectScope: {\n              projectScope: projectScope,\n              projectSubScope: projectSubScope,\n            },\n            isNeededSearchAssistant,\n            isNeededNDA,\n            isNeededUrgent,\n            // freelancersEmailAddresses:'',\n            // offeredMilestones:'',\n            regionId: this.state.defaultRegion\n              ? this.state.defaultRegion\n              : this.props.authUser?.myRegion?.regionName,\n          };\n\n          let result = await request(\n            ENDPOINT[\"UpdateProjectInitStep\"],\n            postOptions(param)\n          );\n\n          let redirectTo =\n            /*  this.state.postType === \"useExisting\"\n              ? \"/confirm-project?id=\" + this.state.existingPost\n              : */ this.props.projectPost.projectType != ProjectType.Contest\n              ? \"/project-post-details?id=\" + this.state.existingPost\n              : \"/post-contest-project?id=\" + this.state.existingPost;\n          this.setState({ loading: false });\n          this.props.history.push(redirectTo);\n        } else {\n          let param = {\n            projectId: \"\",\n            postUserId: this.state.clientId,\n            projectType: projectType,\n            projectScope: {\n              projectScope: projectScope,\n              projectSubScope: projectSubScope,\n            },\n            isNeededSearchAssistant,\n            isNeededNDA,\n            isNeededUrgent,\n            services: !isNeededNDA?selectedServices:selectedServices.concat([this.state.services.NDA[0]])\n          };\n\n          let result = await request(\n            ENDPOINT[\"CreateProject\"],\n            postOptions(param)\n          );\n\n          let redirectTo =\n            this.state.postType === \"useExisting\"\n              ? \"/confirm-project?id=\" + result.result\n              : this.props.projectPost.projectType != ProjectType.Contest\n                ? \"/project-post-details?id=\" + result.result\n                : \"/post-contest-project?id=\" + result.result;\n          this.setState({ loading: false });\n          this.props.history.push(redirectTo);\n        }\n      } else {\n        this.props.history.push(\"/post-contest-project\");\n      }\n    }\n  }\n\n  postTypeHandle = (postType) => {\n    this.setState({\n      postType: postType,\n    });\n  };\n\n  render() {\n    let { languageType, languageReducer, authUser } = this.props;\n    let { postType, ExistingProjectOptionsFlag, isSkeletonLoading,services } = this.state;\n    const { projectPost } = this.props;\n  return (\n      <>\n        <SubHeader />\n        <section className=\"card_sec\">\n          <div className=\"bcknd_container\">\n            <div className=\"row\">\n              <div className=\"col-xl-2\"></div>\n              <div className=\"col-xl-8 col-lg-12 col-md-12\">\n                <SkeletonProjectPost\n                count={1}\n                isSkeletonLoading={isSkeletonLoading} \n                />\n\n                <div className=\"skeletonLoading_mobile\"> \n                  <Skeleton\n                    count={4}\n                    isSkeletonLoading={isSkeletonLoading}\n                  />\n                </div>\n                <div hidden={isSkeletonLoading} className=\"project_post \">\n                  <Heading\n                    heading={languageType.POST_A_PROJECT}\n                    icon={\"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/post_sticky.svg\"}\n                    color=\"#333333\"\n                    fontSize=\"26px\"\n                    fontWeight=\"600\"\n                    fontFamily=\"Raleway\"\n                  />\n\n                  <form className=\"post_form border-top-0\">\n                    <div className=\"row\">\n                      <div className=\"col-md-6\">\n                        <div className=\"form-group\">\n                          <Label\n                            title={languageType.SELECT_PROJECTY_TYPE}\n                            compulsory={true}\n                            question={true}\n                            prefixBoxValid={\n                              this.state.errorMessage[\"projectType\"]\n                                ? false\n                                : true\n                            }\n                            prefixBoxInValid={\n                              this.state.errorMessage[\"projectType\"]\n                                ? true\n                                : false\n                            }\n                            primary={true}\n                            icon={\"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/preferences_project.svg\"}\n                            color=\"#333333\"\n                          />\n                          <div className=\"\">\n                            <DropdownList\n                              id=\"projectType\"\n                              name=\"projectType\"\n                              enableAutoCompleteSearch\n                              placeholder=\"projectType\"\n                              value={projectPost.projectType}\n                              items={this.props.languageReducer.projectTypes}\n                              selectItem={this.onProjectTypeChange}\n                            />\n                          </div>\n                          <span className=\"error\">\n                            {this.state.errorMessage[\"projectType\"]}\n                          </span>\n                        </div>\n                        {projectPost.projectType != ProjectType.Contest ? (\n                          <div className=\"form-group\">\n                            <Label\n                              title={languageType.SELECT_BUSINESS_SCOPE}\n                              compulsory={true}\n                              prefixBoxValid={\n                                this.state.errorMessage[\"projectScope\"]\n                                  ? false\n                                  : true\n                              }\n                              prefixBoxInValid={\n                                this.state.errorMessage[\"projectScope\"]\n                                  ? true\n                                  : false\n                              }\n                              primary={true}\n                              icon={\"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/scope_target.svg\"}\n                              color=\"#333333\"\n                            />\n                            <div className=\"\">\n                              <DropdownList\n                                id=\"projectScope\"\n                                name=\"projectScope\"\n                                enableAutoCompleteSearch\n                                placeholder=\"Select the scope of business\"\n                                value={projectPost.projectScope}\n                                items={this.props.languageReducer.projectScopes?.filter(\n                                  (item) => item.value != \"others\"\n                                )}\n                                selectItem={this.onProjectScopeChange}\n                              />\n                            </div>\n                            <span className=\"error\">\n                              {this.state.errorMessage[\"projectScope\"]}\n                            </span>\n                          </div>\n                        ) : null}\n                        {projectPost.projectType != ProjectType.Contest ? (\n                          <div className=\"form-group\">\n                            <Label\n                              title={languageType.SELECT_SUB_BUSINESS_SCOPE}\n                              compulsory={true}\n                              prefixBoxValid={\n                                this.state.errorMessage[\"projectSubScope\"]\n                                  ? false\n                                  : true\n                              }\n                              prefixBoxInValid={\n                                this.state.errorMessage[\"projectSubScope\"]\n                                  ? true\n                                  : false\n                              }\n                              primary={true}\n                              icon={\"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/icons/subScopeIcon.svg\"}\n                              color=\"#333333\"\n                            />\n\n                            <DropdownList\n                              id=\"projectSubScope\"\n                              name=\"projectSubScope\"\n                              placeholder=\"Select the sub scope of business\"\n                              enableAutoCompleteSearch\n                              disabled={!projectPost.projectScope}\n                              value={projectPost.projectSubScope}\n                              selectItem={this.onProjectSubScopeChange}\n                              items={this.state.projectSubScopes}\n                            />\n                            <span className=\"error\">\n                              {this.state.errorMessage[\"projectSubScope\"]}\n                            </span>\n                          </div>\n                        ) : null}\n                        <div className=\"form-group\">\n                          <Radio\n                            handleSelect={this.postTypeHandle}\n                            name=\"posType\"\n                            id=\"s-option\"\n                            value={\"newPost\"}\n                            checked={postType === \"newPost\"}\n                            label={languageType.CREATE_A_NEW_POST}\n                            compulsory={false}\n                          />\n                        </div>\n                        <div className=\"form-group custom-hidden-area\">\n                          <Radio\n                            handleSelect={() => { }}\n                            name=\"posType\"\n                            id=\"s-option8\"\n                            value={\"newPost1\"}\n                            checked={false}\n                            label={languageType.CREATE_A_NEW_POST}\n                            compulsory={false}\n                          />\n                        </div>\n                        <div className=\"form-group\">\n                          <Radio\n                            handleSelect={this.postTypeHandle}\n                            name=\"posType\"\n                            id=\"s-option1\"\n                            value={\"useExisting\"}\n                            checked={postType === \"useExisting\"}\n                            label={languageType.REUSING_EXISTING_A_POST}\n                            compulsory={false}\n                          />\n                          <DropdownList\n                            id=\"existingPost\"\n                            name=\"existingPost\"\n                            enableAutoCompleteSearch\n                            value={this.state.existingPost}\n                            selectItem={(value) => {\n                              this.handleChange(\"existingPost\", null, value);\n                            }}\n                            disabled={\n                              postType !== \"useExisting\" ||\n                              ExistingProjectOptionsFlag\n                            }\n                            items={this.state.existingProjects}\n                          />\n                          <span\n                            className=\"error\"\n                            hidden={postType !== \"useExisting\"}\n                          >\n                            {this.state.errorMessage[\"existingPost\"]}\n                          </span>\n                        </div>\n                        <div className=\"btnSpaceTop save_cancel text-right NextBtnProjectPostPc\">\n                          <button\n                            type=\"button\"\n                            className=\"btn contest-project-post-btn\"\n                            onClick={() => this.onPageRedirectHandle()}\n                          >\n                            {languageType.NEXT_TEXT}{\" \"}\n                            <img src={\"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/arrowDirection.svg\"} />\n                            {this.state.loading ? (\n                              <i className=\"fa fa-spinner fa-spin\"></i>\n                            ) : (\n                              \"\"\n                            )}\n                          </button>\n                        </div>\n                      </div>\n                      <div className=\"col-md-6\">\n                        <PaymentInfo\n                          projectType={\n                            projectPost.projectType === \"\"\n                              ? ProjectTypeConst.Milestone\n                              : projectPost.projectType\n                          }\n                        />\n                        {projectPost.projectType === \"\" ? <TipsInfo /> : null}\n\n                        <HelpInfo\n                          isNeededSearchAssistant={\n                            projectPost.isNeededSearchAssistant\n                          } \n                          isNeededNDA={projectPost.isNeededNDA}\n                          isNeededUrgent={projectPost.isNeededUrgent}\n                          onFieldChange={this.onHelpInfoFieldChange}\n                          setSign={this.setSign}\n                          sign={this.state.sign}\n                          services={services}\n                          projectPost={projectPost}\n                        />\n\n                        <div className=\"btnSpaceTop save_cancel text-right NextBtnProjectPostMobile\">\n                          <button\n                            type=\"button\"\n                            className=\"btn contest-project-post-btn\"\n                            onClick={() => this.onPageRedirectHandle()}\n                          >\n                            {languageType.NEXT_TEXT}{\" \"}\n                            <img src={\"https://jungleworksassetsbucket.s3.ap-northeast-2.amazonaws.com/bearoleImages/arrowDirection.svg\"} />\n                            {this.state.loading ? (\n                              <i className=\"fa fa-spinner fa-spin\"></i>\n                            ) : (\n                              \"\"\n                            )}\n                          </button>\n                        </div>\n                      </div>\n                    </div>\n                    {/* <div className=\"yesno_box mt-5\">\n                      <div className=\"yesno_bodr\">\n                        <p>Test service cost you 10% of the</p>\n                        <div className=\"yes_no d-flex\">\n                          <p>\n                            total project value...You can read more&nbsp;&nbsp;\n                            <a>detail here</a>. Would like to take this service?\n                          </p>\n                          <div className=\"yes_no_customControl_mobile\">\n                          <div className=\"custom-control custom-checkbox\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id=\"chkYes\"\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor=\"chkYes\"\n                            >\n                              {languageType.YES_TEXT}\n                            </label>\n                          </div>\n                          <div className=\"custom-control custom-checkbox\">\n                            <input\n                              type=\"checkbox\"\n                              className=\"custom-control-input\"\n                              id=\"chkNo\"\n                            />\n                            <label\n                              className=\"custom-control-label\"\n                              htmlFor=\"chkNo\"\n                            >\n                              {languageType.NO_TEXT}\n                            </label>\n                          </div>\n                          </div>\n                        </div>\n                      </div>\n                    </div> */}\n                  </form>\n                </div>\n              </div>\n              <div className=\"col-lg-2 col-md-12\">\n                {/* <RightTop />\n                <RightBottom /> */}\n              </div>\n            </div>\n          </div>\n        </section>\n      </>\n    );\n  }\n}\nfunction mapStateToProps(state) {\n  return {\n    languageType: state.languageReducer.languageType,\n    languageReducer: state.languageReducer,\n    authUser: state.authReducer,\n    projectPost: state.projectStore.projectPost,\n  };\n}\n\nexport default connect(mapStateToProps, {\n  updateField,\n  updateProjectType,\n  updateProjectScope,\n  updateProjectSubScope,\n  updateServices\n})(ProjectPost);\n"]},"metadata":{},"sourceType":"module"}