{"ast":null,"code":"import { ENDPOINT } from \"../../utils/endpoint\";\nimport { getOptions } from \"../../utils/httpConfig\";\nimport request from \"../../utils/request\";\nimport { getUserProjectDetail, getUserProjectDetailSuccess, getUserProjectDetailFailure, getProjectDetail, getProjectDetailFailure, getProjectDetailSuccess, getUserProjectContractDetail, getUserProjectContractDetailSuccess, getUserProjectContractDetailFailure } from \"../action/Project/projectActions\";\nexport const getUserProjectDetails = (projectId, userId) => {\n  return async function (dispatch) {\n    dispatch(getUserProjectDetail());\n    return await request(`${ENDPOINT[\"GetProjectDetails1\"]}?projectId=${projectId}&userId=${userId}`, getOptions({})).then(response => response).then(data => {\n      return dispatch(getUserProjectDetailSuccess(data.result.data.projectResponse));\n    }).catch(error => {\n      if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n        const errorData = {\n          code: 503,\n          message: \"Network Error\"\n        };\n        return dispatch(getUserProjectDetailFailure(errorData));\n      } else {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.code === 400 || error.response.data.code === 401) {\n              return dispatch(getUserProjectDetailFailure(error.response.data));\n            }\n\n            if (error.response.data.code === 409) {\n              const errorData = {\n                code: 409,\n                message: error.response.data.message\n              };\n              return dispatch(getUserProjectDetailFailure(errorData));\n            }\n\n            if (error.response.data.code === 500) {\n              const errorData = {\n                code: 500,\n                message: \"Internal Server Error\"\n              };\n              return dispatch(getUserProjectDetailFailure(errorData));\n            }\n          }\n        }\n      }\n    });\n  };\n};\nexport const getProjectDetails = projectId => {\n  console.log(\"id in action\", projectId);\n  return async function (dispatch) {\n    dispatch(getProjectDetail());\n    return await request(`${ENDPOINT[\"GetProjectDetails\"]}?projectId=` + projectId, getOptions({})).then(response => response).then(data => {\n      return dispatch(getProjectDetailSuccess(data.result.data.projectResponse));\n    }).catch(error => {\n      if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n        const errorData = {\n          code: 503,\n          message: \"Network Error\"\n        };\n        return dispatch(getProjectDetailFailure(errorData));\n      } else {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.code === 400 || error.response.data.code === 401) {\n              return dispatch(getProjectDetailFailure(error.response.data));\n            }\n\n            if (error.response.data.code === 409) {\n              const errorData = {\n                code: 409,\n                message: error.response.data.message\n              };\n              return dispatch(getProjectDetailFailure(errorData));\n            }\n\n            if (error.response.data.code === 500) {\n              const errorData = {\n                code: 500,\n                message: \"Internal Server Error\"\n              };\n              return dispatch(getProjectDetailFailure(errorData));\n            }\n          }\n        }\n      }\n    });\n  };\n};\nexport const getProjectContractDetail = ({\n  projectId,\n  freelancerUserId\n}) => {\n  return async function (dispatch) {\n    dispatch(getUserProjectContractDetail());\n    return await request(`${ENDPOINT[\"GetProjectContractDetail\"]}?projectId=${projectId}&freelancerUserId=${freelancerUserId}`, getOptions({})).then(response => response).then(data => {\n      return dispatch(getUserProjectContractDetailSuccess(data.result));\n    }).catch(error => {\n      if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n        const errorData = {\n          code: 503,\n          message: \"Network Error\"\n        };\n        return dispatch(getUserProjectContractDetailFailure(errorData));\n      } else {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.code === 400 || error.response.data.code === 401) {\n              return dispatch(getUserProjectContractDetailFailure(error.response.data));\n            }\n\n            if (error.response.data.code === 409) {\n              const errorData = {\n                code: 409,\n                message: error.response.data.message\n              };\n              return dispatch(getUserProjectContractDetailFailure(errorData));\n            }\n\n            if (error.response.data.code === 500) {\n              const errorData = {\n                code: 500,\n                message: \"Internal Server Error\"\n              };\n              return dispatch(getUserProjectContractDetailFailure(errorData));\n            }\n          }\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/store/middlewares/Project.js"],"names":["ENDPOINT","getOptions","request","getUserProjectDetail","getUserProjectDetailSuccess","getUserProjectDetailFailure","getProjectDetail","getProjectDetailFailure","getProjectDetailSuccess","getUserProjectContractDetail","getUserProjectContractDetailSuccess","getUserProjectContractDetailFailure","getUserProjectDetails","projectId","userId","dispatch","then","response","data","result","projectResponse","catch","error","toString","includes","errorData","code","message","getProjectDetails","console","log","getProjectContractDetail","freelancerUserId"],"mappings":"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","sourcesContent":["import { ENDPOINT } from \"../../utils/endpoint\";\nimport { getOptions } from \"../../utils/httpConfig\";\nimport request from \"../../utils/request\";\nimport {\n    getUserProjectDetail,\n    getUserProjectDetailSuccess,\n    getUserProjectDetailFailure,\n    getProjectDetail,\n\n    getProjectDetailFailure,\n    getProjectDetailSuccess,\n\n    getUserProjectContractDetail,\n    getUserProjectContractDetailSuccess,\n    getUserProjectContractDetailFailure\n} from \"../action/Project/projectActions\";\n\nexport const getUserProjectDetails = (projectId, userId) => {\n    return async function (dispatch) {\n        dispatch(getUserProjectDetail())\n        return await request(\n            `${ENDPOINT[\"GetProjectDetails1\"]}?projectId=${projectId}&userId=${userId}`,\n            getOptions({})\n        ).then(response => response)\n            .then(data => { return (dispatch(getUserProjectDetailSuccess(data.result.data.projectResponse))) })\n            .catch((error) => {\n                if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n                    const errorData = { code: 503, message: \"Network Error\" }\n                    return (dispatch(getUserProjectDetailFailure(errorData)))\n                } else {\n                    if (error.response) {\n                        if (error.response.data) {\n                            if (error.response.data.code === 400 || error.response.data.code === 401) {\n                                return (dispatch(getUserProjectDetailFailure(error.response.data)))\n                            }\n                            if (error.response.data.code === 409) {\n                                const errorData = { code: 409, message: error.response.data.message }\n                                return (dispatch(getUserProjectDetailFailure(errorData)))\n                            }\n                            if (error.response.data.code === 500) {\n                                const errorData = { code: 500, message: \"Internal Server Error\" }\n                                return (dispatch(getUserProjectDetailFailure(errorData)))\n                            }\n                        }\n                    }\n                }\n            });\n    }\n}\n\n\nexport const getProjectDetails = (projectId) => {\n    console.log(\"id in action\", projectId)\n    return async function (dispatch) {\n        dispatch(getProjectDetail())\n        return await request(\n            `${ENDPOINT[\"GetProjectDetails\"]}?projectId=` + projectId, getOptions({})\n        ).then(response => response)\n            .then(data => { return (dispatch(getProjectDetailSuccess(data.result.data.projectResponse))) })\n            .catch((error) => {\n                if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n                    const errorData = { code: 503, message: \"Network Error\" }\n                    return (dispatch(getProjectDetailFailure(errorData)))\n                } else {\n                    if (error.response) {\n                        if (error.response.data) {\n                            if (error.response.data.code === 400 || error.response.data.code === 401) {\n                                return (dispatch(getProjectDetailFailure(error.response.data)))\n                            }\n                            if (error.response.data.code === 409) {\n                                const errorData = { code: 409, message: error.response.data.message }\n                                return (dispatch(getProjectDetailFailure(errorData)))\n                            }\n                            if (error.response.data.code === 500) {\n                                const errorData = { code: 500, message: \"Internal Server Error\" }\n                                return (dispatch(getProjectDetailFailure(errorData)))\n                            }\n                        }\n                    }\n                }\n            });\n    }\n}\n\n\nexport const getProjectContractDetail = ({ projectId, freelancerUserId }) => {\n    return async function (dispatch) {\n        dispatch(getUserProjectContractDetail())\n        return await request(\n            `${ENDPOINT[\"GetProjectContractDetail\"]}?projectId=${projectId}&freelancerUserId=${freelancerUserId}`,\n            getOptions({})\n        ).then(response => response)\n            .then(data => { return (dispatch(getUserProjectContractDetailSuccess(data.result))) })\n            .catch((error) => {\n                if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n                    const errorData = { code: 503, message: \"Network Error\" }\n                    return (dispatch(getUserProjectContractDetailFailure(errorData)))\n                } else {\n                    if (error.response) {\n                        if (error.response.data) {\n                            if (error.response.data.code === 400 || error.response.data.code === 401) {\n                                return (dispatch(getUserProjectContractDetailFailure(error.response.data)))\n                            }\n                            if (error.response.data.code === 409) {\n                                const errorData = { code: 409, message: error.response.data.message }\n                                return (dispatch(getUserProjectContractDetailFailure(errorData)))\n                            }\n                            if (error.response.data.code === 500) {\n                                const errorData = { code: 500, message: \"Internal Server Error\" }\n                                return (dispatch(getUserProjectContractDetailFailure(errorData)))\n                            }\n                        }\n                    }\n                }\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}