{"ast":null,"code":"import { ENDPOINT } from \"../../utils/endpoint\";\nimport { getOptions } from \"../../utils/httpConfig\";\nimport request from \"../../utils/request\";\nimport { getProjectReviewsClientWise, getProjectReviewsClientWiseSuccess, getProjectReviewsClientWiseFailure, getProjectReviewsFreelancerWise, getProjectReviewsFreelancerWiseSuccess, getProjectReviewsFreelancerWiseFailure } from \"../action/Reviews/ReviewsActions\";\nexport const getProjectReviewClientWise = ({\n  clientUserId\n}) => {\n  return async function (dispatch) {\n    dispatch(getProjectReviewsClientWise());\n    return await request(`${ENDPOINT[\"GetProjectReviewClientWise\"]}?clientUserId=${clientUserId}`, getOptions({})).then(response => response).then(data => {\n      return dispatch(getProjectReviewsClientWiseSuccess(data.result));\n    }).catch(error => {\n      console.log(error);\n\n      if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n        const errorData = {\n          code: 503,\n          message: \"Network Error\"\n        };\n        return dispatch(getProjectReviewsClientWiseFailure(errorData));\n      } else {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.code === 400 || error.response.data.code === 401) {\n              return dispatch(getProjectReviewsClientWiseFailure(error.response.data));\n            }\n\n            if (error.response.data.code === 409) {\n              const errorData = {\n                code: 409,\n                message: error.response.data.message\n              };\n              return dispatch(getProjectReviewsClientWiseFailure(errorData));\n            }\n\n            if (error.response.data.code === 500) {\n              const errorData = {\n                code: 500,\n                message: \"Internal Server Error\"\n              };\n              return dispatch(getProjectReviewsClientWiseFailure(errorData));\n            }\n          }\n        }\n      }\n    });\n  };\n};\nexport const getProjectReviewFreelancerWise = ({\n  freelancerUserId\n}) => {\n  return async function (dispatch) {\n    dispatch(getProjectReviewsFreelancerWise());\n    return await request(`${ENDPOINT[\"GetProjectReviewFreeLancerWise\"]}?freelancerUserId=${freelancerUserId}`, getOptions({})).then(response => response).then(data => {\n      return dispatch(getProjectReviewsFreelancerWiseSuccess(data.result));\n    }).catch(error => {\n      console.log(error);\n\n      if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n        const errorData = {\n          code: 503,\n          message: \"Network Error\"\n        };\n        return dispatch(getProjectReviewsFreelancerWiseFailure(errorData));\n      } else {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.code === 400 || error.response.data.code === 401) {\n              return dispatch(getProjectReviewsFreelancerWiseFailure(error.response.data));\n            }\n\n            if (error.response.data.code === 409) {\n              const errorData = {\n                code: 409,\n                message: error.response.data.message\n              };\n              return dispatch(getProjectReviewsFreelancerWiseFailure(errorData));\n            }\n\n            if (error.response.data.code === 500) {\n              const errorData = {\n                code: 500,\n                message: \"Internal Server Error\"\n              };\n              return dispatch(getProjectReviewsFreelancerWiseFailure(errorData));\n            }\n          }\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/store/middlewares/Reviews.js"],"names":["ENDPOINT","getOptions","request","getProjectReviewsClientWise","getProjectReviewsClientWiseSuccess","getProjectReviewsClientWiseFailure","getProjectReviewsFreelancerWise","getProjectReviewsFreelancerWiseSuccess","getProjectReviewsFreelancerWiseFailure","getProjectReviewClientWise","clientUserId","dispatch","then","response","data","result","catch","error","console","log","toString","includes","errorData","code","message","getProjectReviewFreelancerWise","freelancerUserId"],"mappings":"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","sourcesContent":["import {ENDPOINT} from \"../../utils/endpoint\";\nimport {getOptions} from \"../../utils/httpConfig\";\nimport request from \"../../utils/request\";\n\nimport {\n    getProjectReviewsClientWise,\n    getProjectReviewsClientWiseSuccess,\n    getProjectReviewsClientWiseFailure,\n\n    getProjectReviewsFreelancerWise,\n    getProjectReviewsFreelancerWiseSuccess,\n    getProjectReviewsFreelancerWiseFailure\n} from \"../action/Reviews/ReviewsActions\";\n\nexport const getProjectReviewClientWise = ({clientUserId}) => {\n    return async function (dispatch) {\n        dispatch(getProjectReviewsClientWise())\n        return await request(\n            `${ENDPOINT[\"GetProjectReviewClientWise\"]}?clientUserId=${clientUserId}`,\n            getOptions({})\n        ).then(response => response)\n            .then(data => {return (dispatch(getProjectReviewsClientWiseSuccess(data.result)))})\n            .catch((error) => {\n                console.log(error);\n                if(error.toString().includes('Network Error') || error.toString().includes('TypeError')){\n                    const errorData = {code: 503, message: \"Network Error\"}\n                    return (dispatch(getProjectReviewsClientWiseFailure(errorData)))\n                }else {\n                    if(error.response) {\n                        if (error.response.data) {\n                            if(error.response.data.code === 400 || error.response.data.code === 401){\n                                return (dispatch(getProjectReviewsClientWiseFailure(error.response.data)))\n                            }\n                            if(error.response.data.code === 409){\n                                const errorData = {code:409, message: error.response.data.message}\n                                return (dispatch(getProjectReviewsClientWiseFailure(errorData)))\n                            }\n                            if(error.response.data.code === 500){\n                                const errorData = {code: 500, message: \"Internal Server Error\"}\n                                return (dispatch(getProjectReviewsClientWiseFailure(errorData)))\n                            }\n                        }\n                    }\n                }\n            });\n    }\n}\n\nexport const getProjectReviewFreelancerWise = ({freelancerUserId}) => {\n    return async function (dispatch) {\n        dispatch(getProjectReviewsFreelancerWise())\n        return await request(\n            `${ENDPOINT[\"GetProjectReviewFreeLancerWise\"]}?freelancerUserId=${freelancerUserId}`,\n            getOptions({})\n        ).then(response => response)\n            .then(data => {return (dispatch(getProjectReviewsFreelancerWiseSuccess(data.result)))})\n            .catch((error) => {\n                console.log(error);\n                if(error.toString().includes('Network Error') || error.toString().includes('TypeError')){\n                    const errorData = {code: 503, message: \"Network Error\"}\n                    return (dispatch(getProjectReviewsFreelancerWiseFailure(errorData)))\n                }else {\n                    if(error.response) {\n                        if (error.response.data) {\n                            if(error.response.data.code === 400 || error.response.data.code === 401){\n                                return (dispatch(getProjectReviewsFreelancerWiseFailure(error.response.data)))\n                            }\n                            if(error.response.data.code === 409){\n                                const errorData = {code:409, message: error.response.data.message}\n                                return (dispatch(getProjectReviewsFreelancerWiseFailure(errorData)))\n                            }\n                            if(error.response.data.code === 500){\n                                const errorData = {code: 500, message: \"Internal Server Error\"}\n                                return (dispatch(getProjectReviewsFreelancerWiseFailure(errorData)))\n                            }\n                        }\n                    }\n                }\n            });\n    }\n}\n"]},"metadata":{},"sourceType":"module"}