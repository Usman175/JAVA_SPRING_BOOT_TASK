{"ast":null,"code":"import { ENDPOINT } from \"../../../utils/endpoint.js\";\nimport { getOptions, postOptions } from \"../../../utils/httpConfig.js\";\nimport request from \"../../../utils/request.js\";\nimport { getLookUpDataRequest, getLookUpDataRequestFailure, getLookUpDataRequestSuccess, getDefaultAddressDataRequest, getDefaultAddressDataRequestFailure, getDefaultAddressDataRequestSuccess } from \"../../action/LookUp/lookUpActions.js\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAX7-W0Lk7UXYPIQfp613Rmfp2BtqbTIQw\");\nexport const getLookUpData = (latitude, longitude) => {\n  return async function (dispatch) {\n    dispatch(getLookUpDataRequest());\n    Geocode.fromLatLng(latitude, longitude).then(response => {\n      const address = response.results[0].formatted_address;\n      let city, state, country, shortCode;\n\n      for (let i = 0; i < response.results[0].address_components.length; i++) {\n        for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n          switch (response.results[0].address_components[i].types[j]) {\n            case \"locality\":\n              city = response.results[0].address_components[i].long_name;\n              break;\n\n            case \"administrative_area_level_1\":\n              state = response.results[0].address_components[i].long_name;\n              break;\n\n            case \"country\":\n              country = response.results[0].address_components[i].long_name;\n              break;\n          }\n        }\n      }\n\n      let obj = {\n        shortCode: response.results[0].address_components[response.results[0].address_components.length - 1].short_name,\n        city,\n        state,\n        country,\n        address,\n        placeId: response.results[0].place_id\n      };\n      return dispatch(getLookUpDataRequestSuccess(obj));\n    }, async error => {\n      return await request(`https://extreme-ip-lookup.com/json/?key=demo`, getOptions({})).then(response => response).then(data => {\n        let obj = {\n          shortCode: data.countryCode,\n          city: data.city,\n          state: data.region,\n          country: data.country,\n          address: data.isp\n        };\n        return dispatch(getLookUpDataRequestSuccess(obj));\n      }).catch(error => {\n        return dispatch(getLookUpDataRequestFailure(error));\n      });\n    });\n  };\n}; // https://extreme-ip-lookup.com/json/?key=demo\n//GetDeafultAddressField\n\nexport const getDefaultAddressData = payload => {\n  return async function (dispatch) {\n    dispatch(getDefaultAddressDataRequest());\n    return await request(`${ENDPOINT[\"GetUserAddress\"]}`, postOptions({ ...payload\n    })).then(response => response).then(data => {\n      //Pass Only Default Address\n      return dispatch(getDefaultAddressDataRequestSuccess(data.result));\n    }).catch(error => {\n      if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n        const errorData = {\n          code: 503,\n          message: \"Network Error\"\n        };\n        return dispatch(getDefaultAddressDataRequestFailure(errorData));\n      } else {\n        if (error.response) {\n          if (error.response.data) {\n            if (error.response.data.code === 400 || error.response.data.code === 401) {\n              return dispatch(getDefaultAddressDataRequestFailure(error.response.data));\n            }\n\n            if (error.response.data.code === 409) {\n              const errorData = {\n                code: 409,\n                message: error.response.data.message\n              };\n              return dispatch(getDefaultAddressDataRequestFailure(errorData));\n            }\n\n            if (error.response.data.code === 500) {\n              const errorData = {\n                code: 500,\n                message: \"Internal Server Error\"\n              };\n              return dispatch(getDefaultAddressDataRequestFailure(errorData));\n            }\n          }\n        }\n      }\n    });\n  };\n};","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/store/middlewares/LookUp/getLookUpData.js"],"names":["ENDPOINT","getOptions","postOptions","request","getLookUpDataRequest","getLookUpDataRequestFailure","getLookUpDataRequestSuccess","getDefaultAddressDataRequest","getDefaultAddressDataRequestFailure","getDefaultAddressDataRequestSuccess","Geocode","setApiKey","getLookUpData","latitude","longitude","dispatch","fromLatLng","then","response","address","results","formatted_address","city","state","country","shortCode","i","address_components","length","j","types","long_name","obj","short_name","placeId","place_id","error","data","countryCode","region","isp","catch","getDefaultAddressData","payload","result","toString","includes","errorData","code","message"],"mappings":"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","sourcesContent":["import {ENDPOINT} from \"../../../utils/endpoint.js\";\nimport {getOptions,postOptions} from \"../../../utils/httpConfig.js\";\nimport request from \"../../../utils/request.js\";\nimport {\n    getLookUpDataRequest,\n    getLookUpDataRequestFailure,\n    getLookUpDataRequestSuccess,\n    getDefaultAddressDataRequest,\n    getDefaultAddressDataRequestFailure,\n    getDefaultAddressDataRequestSuccess\n} from \"../../action/LookUp/lookUpActions.js\";\nimport Geocode from \"react-geocode\";\nGeocode.setApiKey(\"AIzaSyAX7-W0Lk7UXYPIQfp613Rmfp2BtqbTIQw\");\nexport const getLookUpData = (latitude,longitude) => {\n    \n    return async function (dispatch) {\n        dispatch(getLookUpDataRequest());\n        Geocode.fromLatLng(latitude, longitude).then(\n            (response) => {\n                const address = response.results[0].formatted_address;\n                let city, state, country,shortCode;\n                for (let i = 0; i < response.results[0].address_components.length; i++) {\n                  for (let j = 0; j < response.results[0].address_components[i].types.length; j++) {\n                    switch (response.results[0].address_components[i].types[j]) {\n                      case \"locality\":\n                        city = response.results[0].address_components[i].long_name;\n                        break;\n                      case \"administrative_area_level_1\":\n                        state = response.results[0].address_components[i].long_name;\n                        break;\n                      case \"country\":\n                        country = response.results[0].address_components[i].long_name;\n                        break;\n                    }\n                  }\n                }\n                let obj={\n                    shortCode:response.results[0].address_components[response.results[0].address_components.length-1].short_name ,\n                    city,\n                    state,\n                    country,\n                    address,\n                    placeId:response.results[0].place_id\n                }\n                return (dispatch(getLookUpDataRequestSuccess(obj)))\n            },\n           async (error) => {\n                return await request(`https://extreme-ip-lookup.com/json/?key=demo`, getOptions({})).then(response => response)\n                .then(data => {\n                    let obj={\n                        shortCode:data.countryCode,\n                        city:data.city,\n                        state:data.region,\n                        country:data.country,\n                        address:data.isp\n                    }\n                    return (dispatch(getLookUpDataRequestSuccess(obj)))\n                })\n                .catch((error) => {\n                    return (dispatch(getLookUpDataRequestFailure(error)))\n            }\n          );\n        \n    \n    }\n    )\n}\n}\n// https://extreme-ip-lookup.com/json/?key=demo\n\n//GetDeafultAddressField\n\n\nexport const getDefaultAddressData = (payload) => {\n\n    return async function (dispatch) {\n      \n        dispatch(getDefaultAddressDataRequest());\n        return await request(`${ENDPOINT[\"GetUserAddress\"]}`, postOptions({...payload})).then(response => response)\n            .then(data => {\n           \n                //Pass Only Default Address\n\n                \n                return (dispatch(getDefaultAddressDataRequestSuccess(data.result)))\n            })\n            .catch((error) => {\n         \n                if (error.toString().includes('Network Error') || error.toString().includes('TypeError')) {\n                    const errorData = {code: 503, message: \"Network Error\"}\n                    return (dispatch(getDefaultAddressDataRequestFailure(errorData)))\n                } else {\n                    if (error.response) {\n                        if (error.response.data) {\n                            if (error.response.data.code === 400 || error.response.data.code === 401) {\n                                return (dispatch(getDefaultAddressDataRequestFailure(error.response.data)))\n                            }\n                            if (error.response.data.code === 409) {\n                                const errorData = {code: 409, message: error.response.data.message}\n                                return (dispatch(getDefaultAddressDataRequestFailure(errorData)))\n                            }\n                            if (error.response.data.code === 500) {\n                                const errorData = {code: 500, message: \"Internal Server Error\"}\n                                return (dispatch(getDefaultAddressDataRequestFailure(errorData)))\n                            }\n                        }\n                    }\n                }\n            });\n    }\n    \n}"]},"metadata":{},"sourceType":"module"}