{"ast":null,"code":"import { GetRegion, GetLocation, GetCountry, GetAuth, GetFreelancerAuth, GetOrganizationAuth, GetClientAuth } from \"./../../../utils/auth\";\nimport { SET_CROSS_DOMAIN_DATA, GUEST_USER, REMOVE_CROSS_DOMAIN_DATA, FREELANCER_CLIENT_AUTH_DATA, SET_REGISTERED_USER_TYPES, SET_ACTIVE_USER_TYPE, UPDATE_REGISTER_USER_FLAG } from \"./../../constants/constant\";\nconst INITIAL_STATE = {\n  myAuth: GetAuth(),\n  freelancerAuth: GetFreelancerAuth(),\n  organizationAuth: GetOrganizationAuth(),\n  clientAuth: GetClientAuth(),\n  myRegion: GetRegion(),\n  myCountry: GetCountry(),\n  myLocation: GetLocation(),\n  registeredUserTypes: [],\n  activeUserType: \"\",\n  isRegisterAsClient: false,\n  isRegisterAsFreelancer: false,\n  isRegisterAsOrganization: false,\n  isRegisterAsHeadhunter: false,\n  isLoading: true,\n  isGuest: true\n};\nexport default ((states = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_CROSS_DOMAIN_DATA:\n      return { ...states,\n        myAuth: GetAuth(),\n        myRegion: GetRegion(),\n        myCounty: GetCountry(),\n        myLocation: GetLocation()\n      };\n\n    case SET_REGISTERED_USER_TYPES:\n      return { ...states,\n        registeredUserTypes: action.payload,\n        isLoading: false\n      };\n\n    case SET_ACTIVE_USER_TYPE:\n      return { ...states,\n        activeUserType: action.payload\n      };\n\n    case UPDATE_REGISTER_USER_FLAG:\n      return { ...states,\n        [action.payload.type]: action.payload.flag\n      };\n\n    case FREELANCER_CLIENT_AUTH_DATA:\n      return { ...states,\n        freelancerAuth: GetFreelancerAuth(),\n        organizationAuth: GetOrganizationAuth(),\n        clientAuth: GetClientAuth()\n      };\n\n    case GUEST_USER:\n      return { ...states,\n        isGuest: action.payload\n      };\n\n    case REMOVE_CROSS_DOMAIN_DATA:\n      return {\n        myAuth: GetAuth(),\n        myRegion: GetRegion(),\n        myCountry: GetCountry(),\n        myLocation: GetLocation(),\n        isGuest: true\n      };\n\n    default:\n      return states;\n  }\n});","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/store/reducer/authReducer/authReducer.js"],"names":["GetRegion","GetLocation","GetCountry","GetAuth","GetFreelancerAuth","GetOrganizationAuth","GetClientAuth","SET_CROSS_DOMAIN_DATA","GUEST_USER","REMOVE_CROSS_DOMAIN_DATA","FREELANCER_CLIENT_AUTH_DATA","SET_REGISTERED_USER_TYPES","SET_ACTIVE_USER_TYPE","UPDATE_REGISTER_USER_FLAG","INITIAL_STATE","myAuth","freelancerAuth","organizationAuth","clientAuth","myRegion","myCountry","myLocation","registeredUserTypes","activeUserType","isRegisterAsClient","isRegisterAsFreelancer","isRegisterAsOrganization","isRegisterAsHeadhunter","isLoading","isGuest","states","action","type","myCounty","payload","flag"],"mappings":"AAAA,SACEA,SADF,EAEEC,WAFF,EAGEC,UAHF,EAIEC,OAJF,EAKEC,iBALF,EAMEC,mBANF,EAOEC,aAPF,QAQO,uBARP;AASA,SACEC,qBADF,EAEEC,UAFF,EAGEC,wBAHF,EAIEC,2BAJF,EAKEC,yBALF,EAMEC,oBANF,EAOEC,yBAPF,QAQO,4BARP;AAUA,MAAMC,aAAa,GAAG;AACpBC,EAAAA,MAAM,EAAEZ,OAAO,EADK;AAEpBa,EAAAA,cAAc,EAAEZ,iBAAiB,EAFb;AAGpBa,EAAAA,gBAAgB,EAAEZ,mBAAmB,EAHjB;AAIpBa,EAAAA,UAAU,EAAEZ,aAAa,EAJL;AAKpBa,EAAAA,QAAQ,EAAEnB,SAAS,EALC;AAMpBoB,EAAAA,SAAS,EAAElB,UAAU,EAND;AAOpBmB,EAAAA,UAAU,EAAEpB,WAAW,EAPH;AAQpBqB,EAAAA,mBAAmB,EAAC,EARA;AASpBC,EAAAA,cAAc,EAAC,EATK;AAUpBC,EAAAA,kBAAkB,EAAC,KAVC;AAWpBC,EAAAA,sBAAsB,EAAC,KAXH;AAYpBC,EAAAA,wBAAwB,EAAC,KAZL;AAapBC,EAAAA,sBAAsB,EAAC,KAbH;AAcpBC,EAAAA,SAAS,EAAC,IAdU;AAepBC,EAAAA,OAAO,EAAE;AAfW,CAAtB;AAkBA,gBAAe,CAACC,MAAM,GAAGhB,aAAV,EAAyBiB,MAAzB,KAAoC;AACjD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKzB,qBAAL;AACE,aAAO,EACL,GAAGuB,MADE;AAELf,QAAAA,MAAM,EAAEZ,OAAO,EAFV;AAGLgB,QAAAA,QAAQ,EAAEnB,SAAS,EAHd;AAILiC,QAAAA,QAAQ,EAAE/B,UAAU,EAJf;AAKLmB,QAAAA,UAAU,EAAEpB,WAAW;AALlB,OAAP;;AAOA,SAAKU,yBAAL;AACE,aAAO,EACL,GAAGmB,MADE;AAELR,QAAAA,mBAAmB,EAACS,MAAM,CAACG,OAFtB;AAGLN,QAAAA,SAAS,EAAC;AAHL,OAAP;;AAKF,SAAKhB,oBAAL;AACI,aAAO,EACL,GAAGkB,MADE;AAELP,QAAAA,cAAc,EAACQ,MAAM,CAACG;AAFjB,OAAP;;AAIH,SAAKrB,yBAAL;AACC,aAAO,EACL,GAAGiB,MADE;AAEL,SAACC,MAAM,CAACG,OAAP,CAAeF,IAAhB,GAAsBD,MAAM,CAACG,OAAP,CAAeC;AAFhC,OAAP;;AAIJ,SAAKzB,2BAAL;AACE,aAAO,EACL,GAAGoB,MADE;AAELd,QAAAA,cAAc,EAAEZ,iBAAiB,EAF5B;AAGLa,QAAAA,gBAAgB,EAAEZ,mBAAmB,EAHhC;AAILa,QAAAA,UAAU,EAAEZ,aAAa;AAJpB,OAAP;;AAMF,SAAKE,UAAL;AACE,aAAO,EACL,GAAGsB,MADE;AAELD,QAAAA,OAAO,EAAEE,MAAM,CAACG;AAFX,OAAP;;AAIF,SAAKzB,wBAAL;AACE,aAAO;AACLM,QAAAA,MAAM,EAAEZ,OAAO,EADV;AAELgB,QAAAA,QAAQ,EAAEnB,SAAS,EAFd;AAGLoB,QAAAA,SAAS,EAAElB,UAAU,EAHhB;AAILmB,QAAAA,UAAU,EAAEpB,WAAW,EAJlB;AAKL4B,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF;AACE,aAAOC,MAAP;AA9CJ;AAgDD,CAjDD","sourcesContent":["import {\n  GetRegion,\n  GetLocation,\n  GetCountry,\n  GetAuth,\n  GetFreelancerAuth,\n  GetOrganizationAuth,\n  GetClientAuth,\n} from \"./../../../utils/auth\";\nimport {\n  SET_CROSS_DOMAIN_DATA,\n  GUEST_USER,\n  REMOVE_CROSS_DOMAIN_DATA,\n  FREELANCER_CLIENT_AUTH_DATA,\n  SET_REGISTERED_USER_TYPES,\n  SET_ACTIVE_USER_TYPE,\n  UPDATE_REGISTER_USER_FLAG\n} from \"./../../constants/constant\";\n\nconst INITIAL_STATE = {\n  myAuth: GetAuth(),\n  freelancerAuth: GetFreelancerAuth(),\n  organizationAuth: GetOrganizationAuth(),\n  clientAuth: GetClientAuth(),\n  myRegion: GetRegion(),\n  myCountry: GetCountry(),\n  myLocation: GetLocation(),\n  registeredUserTypes:[],\n  activeUserType:\"\",\n  isRegisterAsClient:false,\n  isRegisterAsFreelancer:false,\n  isRegisterAsOrganization:false,\n  isRegisterAsHeadhunter:false, \n  isLoading:true,\n  isGuest: true,\n};\n\nexport default (states = INITIAL_STATE, action) => {\n  switch (action.type) {\n    case SET_CROSS_DOMAIN_DATA:\n      return {\n        ...states,\n        myAuth: GetAuth(),\n        myRegion: GetRegion(),\n        myCounty: GetCountry(),\n        myLocation: GetLocation(),\n      };\n      case SET_REGISTERED_USER_TYPES:\n        return {\n          ...states,\n          registeredUserTypes:action.payload,\n          isLoading:false\n        };\n      case SET_ACTIVE_USER_TYPE:\n          return {\n            ...states,\n            activeUserType:action.payload,\n       };\n       case UPDATE_REGISTER_USER_FLAG:\n        return {\n          ...states,\n          [action.payload.type]:action.payload.flag,\n     };  \n    case FREELANCER_CLIENT_AUTH_DATA:\n      return {\n        ...states,\n        freelancerAuth: GetFreelancerAuth(),\n        organizationAuth: GetOrganizationAuth(),\n        clientAuth: GetClientAuth(),\n      };\n    case GUEST_USER:\n      return {\n        ...states,\n        isGuest: action.payload,\n      };\n    case REMOVE_CROSS_DOMAIN_DATA:\n      return {\n        myAuth: GetAuth(),\n        myRegion: GetRegion(),\n        myCountry: GetCountry(),\n        myLocation: GetLocation(),\n        isGuest: true,\n      };\n    default:\n      return states;\n  }\n};\n"]},"metadata":{},"sourceType":"module"}