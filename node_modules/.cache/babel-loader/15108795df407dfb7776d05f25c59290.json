{"ast":null,"code":"var _jsxFileName = \"/var/www/php74/bearolefrontend/src/components/project/projectTypeFilter.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport CheckboxCard from \"../checkboxCard/checkboxCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { projectPost_updateProjectType as updateProjectType } from \"../../store/action/Project/projectActions\";\n\nconst ProjectTypeFilter = ({\n  projectTypes,\n  onChange,\n  projectTypeFlag\n}) => {\n  const [projectTypeItems, setProjectTypeItems] = useState([]); // [{name, title, checked}]\n\n  const [allProjectType, setAllProjectType] = useState({\n    checked: false,\n    name: 5,\n    title: \"All Projects\"\n  });\n  const dispatch = useDispatch();\n  const projectPost = useSelector(state => state.projectStore.projectPost);\n  const languageType = useSelector(state => state.languageReducer.languageType);\n  useEffect(() => {\n    /*      debugger; */\n    const newProjectTypeItems = [];\n    projectTypes.forEach((projectType, index) => {\n      newProjectTypeItems.push({\n        name: index,\n        title: projectType.text,\n        checked: false\n      });\n    });\n    setProjectTypeItems(newProjectTypeItems);\n  }, []);\n  useEffect(() => {\n    let newProjectTypes = [...projectTypeItems];\n    let filterType = newProjectTypes.filter(item => item.checked === true)[0];\n\n    if (filterType) {\n      filterType.checked = false;\n      let newProjectType = newProjectTypes.filter(item => item.title === projectPost.projectType)[0];\n\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    } else {\n      let newProjectType = newProjectTypes.filter(item => item.title === projectPost.projectType)[0];\n\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    }\n\n    if (projectTypeFlag) {\n      if (projectTypeFlag != \"All Projects\" && projectTypeFlag != \"\") {\n        dispatch(updateProjectType(projectTypeFlag === null || projectTypeFlag === void 0 ? void 0 : projectTypeFlag.replace(/([A-Z]+)/g, \" $1\").replace(/^ /, \"\")));\n        setAllProjectType({ ...allProjectType,\n          checked: false\n        });\n      }\n    }\n  }, [projectPost.projectType]);\n\n  const onCheckboxCardChange = (event, type, index, name) => {\n    if (name === \"All Projects\") {\n      onChange(event, type, index, \"\");\n      dispatch(updateProjectType(\"All Projects\"));\n      setAllProjectType({ ...allProjectType,\n        checked: true\n      });\n    } else {\n      dispatch(updateProjectType(name.replace(/\\s/g, \"\")));\n      onChange(event, type, index, name.replace(/\\s/g, \"\"));\n      setAllProjectType({ ...allProjectType,\n        checked: false\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    if (!projectTypeItems.length) return;\n    const newProjectTypeItems = [...projectTypeItems];\n    projectTypes.forEach((projectType, index) => {\n      newProjectTypeItems[index].title = projectType.text;\n    });\n    setProjectTypeItems(newProjectTypeItems);\n  }, [languageType]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxCard, {\n    title: \"Project Type\",\n    data: [allProjectType, ...projectTypeItems.map(item => {\n      if (allProjectType.checked) {\n        item.checked = false;\n        return item;\n      }\n\n      return item;\n    })],\n    languageType: languageType,\n    type: \"projectTypes\",\n    onChange: onCheckboxCardChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    projectTypes: state.languageReducer.projectTypes\n  };\n};\n\nexport default connect(mapStateToProps)(ProjectTypeFilter);","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/components/project/projectTypeFilter.js"],"names":["React","useState","useEffect","connect","CheckboxCard","useDispatch","useSelector","projectPost_updateProjectType","updateProjectType","ProjectTypeFilter","projectTypes","onChange","projectTypeFlag","projectTypeItems","setProjectTypeItems","allProjectType","setAllProjectType","checked","name","title","dispatch","projectPost","state","projectStore","languageType","languageReducer","newProjectTypeItems","forEach","projectType","index","push","text","newProjectTypes","filterType","filter","item","newProjectType","replace","onCheckboxCardChange","event","type","length","marginTop","map","mapStateToProps"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,YAAP,MAAyB,8BAAzB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,6BAA6B,IAAIC,iBAA1C,QAAmE,2CAAnE;;AACA,MAAMC,iBAAiB,GAAG,CAAC;AAAEC,EAAAA,YAAF;AAAgBC,EAAAA,QAAhB;AAA0BC,EAAAA;AAA1B,CAAD,KAAiD;AACzE,QAAM,CAACC,gBAAD,EAAmBC,mBAAnB,IAA0Cb,QAAQ,CAAC,EAAD,CAAxD,CADyE,CACX;;AAC9D,QAAM,CAACc,cAAD,EAAiBC,iBAAjB,IAAsCf,QAAQ,CAAC;AACnDgB,IAAAA,OAAO,EAAE,KAD0C;AAEnDC,IAAAA,IAAI,EAAE,CAF6C;AAGnDC,IAAAA,KAAK,EAAE;AAH4C,GAAD,CAApD;AAKA,QAAMC,QAAQ,GAAGf,WAAW,EAA5B;AAEA,QAAMgB,WAAW,GAAGf,WAAW,CAAEgB,KAAD,IAAWA,KAAK,CAACC,YAAN,CAAmBF,WAA/B,CAA/B;AACA,QAAMG,YAAY,GAAGlB,WAAW,CAC7BgB,KAAD,IAAWA,KAAK,CAACG,eAAN,CAAsBD,YADH,CAAhC;AAIAtB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,UAAMwB,mBAAmB,GAAG,EAA5B;AACAhB,IAAAA,YAAY,CAACiB,OAAb,CAAqB,CAACC,WAAD,EAAcC,KAAd,KAAwB;AAC3CH,MAAAA,mBAAmB,CAACI,IAApB,CAAyB;AACvBZ,QAAAA,IAAI,EAAEW,KADiB;AAEvBV,QAAAA,KAAK,EAAES,WAAW,CAACG,IAFI;AAGvBd,QAAAA,OAAO,EAAE;AAHc,OAAzB;AAKD,KAND;AAQAH,IAAAA,mBAAmB,CAACY,mBAAD,CAAnB;AACD,GAZQ,EAYN,EAZM,CAAT;AAcAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI8B,eAAe,GAAG,CAAC,GAAGnB,gBAAJ,CAAtB;AACA,QAAIoB,UAAU,GAAGD,eAAe,CAACE,MAAhB,CAAwBC,IAAD,IAAUA,IAAI,CAAClB,OAAL,KAAiB,IAAlD,EAAwD,CAAxD,CAAjB;;AACA,QAAIgB,UAAJ,EAAgB;AACdA,MAAAA,UAAU,CAAChB,OAAX,GAAqB,KAArB;AACA,UAAImB,cAAc,GAAGJ,eAAe,CAACE,MAAhB,CAClBC,IAAD,IAAUA,IAAI,CAAChB,KAAL,KAAeE,WAAW,CAACO,WADlB,EAEnB,CAFmB,CAArB;;AAGA,UAAIQ,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACnB,OAAf,GAAyB,IAAzB;AACAH,QAAAA,mBAAmB,CAACkB,eAAD,CAAnB;AACD;AACF,KATD,MASO;AACL,UAAII,cAAc,GAAGJ,eAAe,CAACE,MAAhB,CAClBC,IAAD,IAAUA,IAAI,CAAChB,KAAL,KAAeE,WAAW,CAACO,WADlB,EAEnB,CAFmB,CAArB;;AAGA,UAAIQ,cAAJ,EAAoB;AAClBA,QAAAA,cAAc,CAACnB,OAAf,GAAyB,IAAzB;AACAH,QAAAA,mBAAmB,CAACkB,eAAD,CAAnB;AACD;AACF;;AAED,QAAIpB,eAAJ,EAAqB;AACnB,UAAIA,eAAe,IAAI,cAAnB,IAAqCA,eAAe,IAAI,EAA5D,EAAgE;AAC9DQ,QAAAA,QAAQ,CACNZ,iBAAiB,CACfI,eADe,aACfA,eADe,uBACfA,eAAe,CAAEyB,OAAjB,CAAyB,WAAzB,EAAsC,KAAtC,EAA6CA,OAA7C,CAAqD,IAArD,EAA2D,EAA3D,CADe,CADX,CAAR;AAKArB,QAAAA,iBAAiB,CAAC,EAAE,GAAGD,cAAL;AAAqBE,UAAAA,OAAO,EAAE;AAA9B,SAAD,CAAjB;AACD;AACF;AACF,GAhCQ,EAgCN,CAACI,WAAW,CAACO,WAAb,CAhCM,CAAT;;AAkCA,QAAMU,oBAAoB,GAAG,CAACC,KAAD,EAAQC,IAAR,EAAcX,KAAd,EAAqBX,IAArB,KAA8B;AACzD,QAAIA,IAAI,KAAK,cAAb,EAA6B;AAC3BP,MAAAA,QAAQ,CAAC4B,KAAD,EAAQC,IAAR,EAAcX,KAAd,EAAqB,EAArB,CAAR;AACAT,MAAAA,QAAQ,CAACZ,iBAAiB,CAAC,cAAD,CAAlB,CAAR;AACAQ,MAAAA,iBAAiB,CAAC,EAAE,GAAGD,cAAL;AAAqBE,QAAAA,OAAO,EAAE;AAA9B,OAAD,CAAjB;AACD,KAJD,MAIO;AACLG,MAAAA,QAAQ,CAACZ,iBAAiB,CAACU,IAAI,CAACmB,OAAL,CAAa,KAAb,EAAoB,EAApB,CAAD,CAAlB,CAAR;AACA1B,MAAAA,QAAQ,CAAC4B,KAAD,EAAQC,IAAR,EAAcX,KAAd,EAAqBX,IAAI,CAACmB,OAAL,CAAa,KAAb,EAAoB,EAApB,CAArB,CAAR;AACArB,MAAAA,iBAAiB,CAAC,EAAE,GAAGD,cAAL;AAAqBE,QAAAA,OAAO,EAAE;AAA9B,OAAD,CAAjB;AACD;AACF,GAVD;;AAWAjB,EAAAA,KAAK,CAACE,SAAN,CAAgB,MAAM;AACpB,QAAI,CAACW,gBAAgB,CAAC4B,MAAtB,EAA8B;AAC9B,UAAMf,mBAAmB,GAAG,CAAC,GAAGb,gBAAJ,CAA5B;AACAH,IAAAA,YAAY,CAACiB,OAAb,CAAqB,CAACC,WAAD,EAAcC,KAAd,KAAwB;AAC3CH,MAAAA,mBAAmB,CAACG,KAAD,CAAnB,CAA2BV,KAA3B,GAAmCS,WAAW,CAACG,IAA/C;AACD,KAFD;AAGAjB,IAAAA,mBAAmB,CAACY,mBAAD,CAAnB;AACD,GAPD,EAOG,CAACF,YAAD,CAPH;AASA,sBACE;AAAK,IAAA,KAAK,EAAE;AAAEkB,MAAAA,SAAS,EAAE;AAAb,KAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,YAAD;AACE,IAAA,KAAK,EAAC,cADR;AAEE,IAAA,IAAI,EAAE,CACJ3B,cADI,EAEJ,GAAGF,gBAAgB,CAAC8B,GAAjB,CAAsBR,IAAD,IAAU;AAChC,UAAIpB,cAAc,CAACE,OAAnB,EAA4B;AAC1BkB,QAAAA,IAAI,CAAClB,OAAL,GAAe,KAAf;AACA,eAAOkB,IAAP;AACD;;AACD,aAAOA,IAAP;AACD,KANE,CAFC,CAFR;AAYE,IAAA,YAAY,EAAEX,YAZhB;AAaE,IAAA,IAAI,EAAC,cAbP;AAcE,IAAA,QAAQ,EAAEc,oBAdZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADF;AAoBD,CAtGD;;AAwGA,MAAMM,eAAe,GAAItB,KAAD,IAAW;AACjC,SAAO;AACLZ,IAAAA,YAAY,EAAEY,KAAK,CAACG,eAAN,CAAsBf;AAD/B,GAAP;AAGD,CAJD;;AAMA,eAAeP,OAAO,CAACyC,eAAD,CAAP,CAAyBnC,iBAAzB,CAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport CheckboxCard from \"../checkboxCard/checkboxCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { projectPost_updateProjectType as updateProjectType } from \"../../store/action/Project/projectActions\";\nconst ProjectTypeFilter = ({ projectTypes, onChange, projectTypeFlag }) => {\n  const [projectTypeItems, setProjectTypeItems] = useState([]); // [{name, title, checked}]\n  const [allProjectType, setAllProjectType] = useState({\n    checked: false,\n    name: 5,\n    title: \"All Projects\",\n  });\n  const dispatch = useDispatch();\n\n  const projectPost = useSelector((state) => state.projectStore.projectPost);\n  const languageType = useSelector(\n    (state) => state.languageReducer.languageType\n  );\n\n  useEffect(() => {\n    /*      debugger; */\n    const newProjectTypeItems = [];\n    projectTypes.forEach((projectType, index) => {\n      newProjectTypeItems.push({\n        name: index,\n        title: projectType.text,\n        checked: false,\n      });\n    });\n\n    setProjectTypeItems(newProjectTypeItems);\n  }, []);\n\n  useEffect(() => {\n    let newProjectTypes = [...projectTypeItems];\n    let filterType = newProjectTypes.filter((item) => item.checked === true)[0];\n    if (filterType) {\n      filterType.checked = false;\n      let newProjectType = newProjectTypes.filter(\n        (item) => item.title === projectPost.projectType\n      )[0];\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    } else {\n      let newProjectType = newProjectTypes.filter(\n        (item) => item.title === projectPost.projectType\n      )[0];\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    }\n\n    if (projectTypeFlag) {\n      if (projectTypeFlag != \"All Projects\" && projectTypeFlag != \"\") {\n        dispatch(\n          updateProjectType(\n            projectTypeFlag?.replace(/([A-Z]+)/g, \" $1\").replace(/^ /, \"\")\n          )\n        );\n        setAllProjectType({ ...allProjectType, checked: false });\n      }\n    }\n  }, [projectPost.projectType]);\n\n  const onCheckboxCardChange = (event, type, index, name) => {\n    if (name === \"All Projects\") {\n      onChange(event, type, index, \"\");\n      dispatch(updateProjectType(\"All Projects\"));\n      setAllProjectType({ ...allProjectType, checked: true });\n    } else {\n      dispatch(updateProjectType(name.replace(/\\s/g, \"\")));\n      onChange(event, type, index, name.replace(/\\s/g, \"\"));\n      setAllProjectType({ ...allProjectType, checked: false });\n    }\n  };\n  React.useEffect(() => {\n    if (!projectTypeItems.length) return;\n    const newProjectTypeItems = [...projectTypeItems];\n    projectTypes.forEach((projectType, index) => {\n      newProjectTypeItems[index].title = projectType.text;\n    });\n    setProjectTypeItems(newProjectTypeItems);\n  }, [languageType]);\n\n  return (\n    <div style={{ marginTop: \"20px\" }}>\n      <CheckboxCard\n        title=\"Project Type\"\n        data={[\n          allProjectType,\n          ...projectTypeItems.map((item) => {\n            if (allProjectType.checked) {\n              item.checked = false;\n              return item;\n            }\n            return item;\n          }),\n        ]}\n        languageType={languageType}\n        type=\"projectTypes\"\n        onChange={onCheckboxCardChange}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    projectTypes: state.languageReducer.projectTypes,\n  };\n};\n\nexport default connect(mapStateToProps)(ProjectTypeFilter);\n"]},"metadata":{},"sourceType":"module"}