{"ast":null,"code":"/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\nfunction parseJSON(response) {\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n\n  return response.json();\n}\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\n\n\nfunction checkStatus(response) {\n  //if (response.status >= 200 && response.status < 300) {\n  return response; //}\n  //const error = new Error(response.statusText);\n  //error.response = response;\n  //throw error;\n}\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\n\n\nexport default function request(url, options) {\n  let token = localStorage.getItem(\"USER_TOKEN\");\n  if (options && options.headers && token) options.headers.Authorization = `Bearer ${token}`;\n  return fetch(url, options).then(checkStatus).then(parseJSON).catch(error => {\n    return error;\n  });\n}","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/utils/request.js"],"names":["parseJSON","response","status","json","checkStatus","request","url","options","token","localStorage","getItem","headers","Authorization","fetch","then","catch","error"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,SAASA,SAAT,CAAmBC,QAAnB,EAA6B;AAE3B,MAAIA,QAAQ,CAACC,MAAT,KAAoB,GAApB,IAA2BD,QAAQ,CAACC,MAAT,KAAoB,GAAnD,EAAwD;AACtD,WAAO,IAAP;AACD;;AAED,SAAOD,QAAQ,CAACE,IAAT,EAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,WAAT,CAAqBH,QAArB,EAA+B;AAC7B;AACE,SAAOA,QAAP,CAF2B,CAG7B;AAEA;AACA;AACA;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe,SAASI,OAAT,CAAiBC,GAAjB,EAAsBC,OAAtB,EAA+B;AAC5C,MAAIC,KAAK,GAAGC,YAAY,CAACC,OAAb,CAAqB,YAArB,CAAZ;AACA,MAAIH,OAAO,IAAIA,OAAO,CAACI,OAAnB,IAA8BH,KAAlC,EACED,OAAO,CAACI,OAAR,CAAgBC,aAAhB,GAAiC,UAASJ,KAAM,EAAhD;AAEA,SAAOK,KAAK,CAACP,GAAD,EAAMC,OAAN,CAAL,CAAoBO,IAApB,CAAyBV,WAAzB,EAAsCU,IAAtC,CAA2Cd,SAA3C,EAAsDe,KAAtD,CAA6DC,KAAD,IAAS;AACzE,WAAOA,KAAP;AACF,GAFM,CAAP;AAIH","sourcesContent":["/**\n * Parses the JSON returned by a network request\n *\n * @param  {object} response A response from a network request\n *\n * @return {object}          The parsed JSON from the request\n */\n\nfunction parseJSON(response) {\n\n  if (response.status === 204 || response.status === 205) {\n    return null;\n  }\n \n  return response.json();\n}\n\n/**\n * Checks if a network request came back fine, and throws an error if not\n *\n * @param  {object} response   A response from a network request\n *\n * @return {object|undefined} Returns either the response, or throws an error\n */\nfunction checkStatus(response) {\n  //if (response.status >= 200 && response.status < 300) {\n    return response;\n  //}\n\n  //const error = new Error(response.statusText);\n  //error.response = response;\n  //throw error;\n}\n\n/**\n * Requests a URL, returning a promise\n *\n * @param  {string} url       The URL we want to request\n * @param  {object} [options] The options we want to pass to \"fetch\"\n *\n * @return {object}           The response data\n */\nexport default function request(url, options) {\n  let token = localStorage.getItem(\"USER_TOKEN\")\n  if (options && options.headers && token)\n    options.headers.Authorization = `Bearer ${token}`;\n\n    return fetch(url, options).then(checkStatus).then(parseJSON).catch((error)=>{\n       return error\n    });\n\n}\n"]},"metadata":{},"sourceType":"module"}