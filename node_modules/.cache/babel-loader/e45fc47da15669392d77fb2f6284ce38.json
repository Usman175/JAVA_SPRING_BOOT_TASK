{"ast":null,"code":"var _jsxFileName = \"/var/www/php74/bearolefrontend/src/components/postProject/paymentInfo.js\";\nimport React from \"react\";\nimport './postProject.scss';\nconst PaymentInfoMap = {\n  Milestone: {\n    head: \"Milestone Payments\",\n    subHeads: {\n      \"Creating Milestone Payments\": \"The project payment can be made by installments as the project goes fund is being hold until empolyer decide to release the fund.\",\n      \"Releasing Milestone\": \"By releasing payments to the freelancer, it proves client is satisfied with the work completed so far.\",\n      \"Cancel Milestone\": \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\"\n    }\n  },\n  Hourly: {\n    head: \"Hourly Work\",\n    subHeads: {\n      \"Creating Hourly Work\": \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n      \"Weekly Billing\": \"The payment is automatically paid every Tuesday of the previous week.\",\n      \"Cancel Milestone\": \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\"\n    }\n  },\n  Contest: {\n    head: \"Contest\",\n    subHeads: {\n      \"Creating Hourly Work\": \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n      \"Weekly Billing\": \"The payment is automatically paid every Tuesday of the previous week.\",\n      \"Cancel Milestone\": \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\"\n    }\n  },\n  OfficeWork: {\n    head: \"Office Work Contest\",\n    subHeads: {\n      \"Creating Office Work Work\": \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n      \"Agreed Payment Term\": \"The payment is automatically paid every Tuesday of the previous week.\",\n      \"Cancel Milestone\": \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\"\n    }\n  },\n  FreeContract: {\n    head: \"Free Contract\",\n    subHeads: {\n      \"Creating Free Contract\": \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n      \"Weekly Billing\": \"The payment is automatically paid every Tuesday of the previous week.\",\n      \"Cancel Milestone\": \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\"\n    }\n  }\n};\n\nfunction PaymentInfo({\n  projectType\n}) {\n  const paymentInfo = PaymentInfoMap[projectType];\n\n  if (!paymentInfo) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"map_div\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 13\n    }\n  }, paymentInfo.head), Object.entries(paymentInfo.subHeads).map(([key, value]) => /*#__PURE__*/React.createElement(\"div\", {\n    key: `${key}`,\n    className: \"my-2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 21\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"font-weight-bold\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 25\n    }\n  }, key, \":\\xA0\\xA0\"), /*#__PURE__*/React.createElement(\"span\", {\n    className: \"text-justify\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 25\n    }\n  }, value))));\n}\n\nexport default PaymentInfo;","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/components/postProject/paymentInfo.js"],"names":["React","PaymentInfoMap","Milestone","head","subHeads","Hourly","Contest","OfficeWork","FreeContract","PaymentInfo","projectType","paymentInfo","Object","entries","map","key","value"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACnBC,EAAAA,SAAS,EAAE;AACPC,IAAAA,IAAI,EAAE,oBADC;AAEPC,IAAAA,QAAQ,EAAE;AACN,qCACI,mIAFE;AAGN,6BACI,wGAJE;AAKN,0BACI;AANE;AAFH,GADQ;AAYnBC,EAAAA,MAAM,EAAE;AACJF,IAAAA,IAAI,EAAE,aADF;AAEJC,IAAAA,QAAQ,EAAE;AACN,8BACI,+SAFE;AAGN,wBACI,uEAJE;AAKN,0BACI;AANE;AAFN,GAZW;AAuBnBE,EAAAA,OAAO,EAAE;AACLH,IAAAA,IAAI,EAAE,SADD;AAELC,IAAAA,QAAQ,EAAE;AACN,8BACI,+SAFE;AAGN,wBACI,uEAJE;AAKN,0BACI;AANE;AAFL,GAvBU;AAkCnBG,EAAAA,UAAU,EAAE;AACRJ,IAAAA,IAAI,EAAE,qBADE;AAERC,IAAAA,QAAQ,EAAE;AACN,mCACI,+SAFE;AAGN,6BACI,uEAJE;AAKN,0BACI;AANE;AAFF,GAlCO;AA6CnBI,EAAAA,YAAY,EAAE;AACVL,IAAAA,IAAI,EAAE,eADI;AAEVC,IAAAA,QAAQ,EAAE;AACN,gCACI,+SAFE;AAGN,wBACI,uEAJE;AAKN,0BACI;AANE;AAFA;AA7CK,CAAvB;;AA0DA,SAASK,WAAT,CAAqB;AAAEC,EAAAA;AAAF,CAArB,EAAsC;AAClC,QAAMC,WAAW,GAAGV,cAAc,CAACS,WAAD,CAAlC;;AAEA,MAAI,CAACC,WAAL,EAAkB;AACd,WAAO,IAAP;AACH;;AAED,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAQA,WAAW,CAACR,IAApB,CADJ,EAGQS,MAAM,CAACC,OAAP,CAAeF,WAAW,CAACP,QAA3B,EAAqCU,GAArC,CAAyC,CAAC,CAACC,GAAD,EAAMC,KAAN,CAAD,kBACrC;AAAK,IAAA,GAAG,EAAG,GAAED,GAAI,EAAjB;AAAoB,IAAA,SAAS,EAAC,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI;AAAM,IAAA,SAAS,EAAC,kBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACKA,GADL,cADJ,eAII;AAAM,IAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAgCC,KAAhC,CAJJ,CADJ,CAHR,CADJ;AAeH;;AAED,eAAeP,WAAf","sourcesContent":["import React from \"react\";\nimport './postProject.scss'\n\nconst PaymentInfoMap = {\n    Milestone: {\n        head: \"Milestone Payments\",\n        subHeads: {\n            \"Creating Milestone Payments\":\n                \"The project payment can be made by installments as the project goes fund is being hold until empolyer decide to release the fund.\",\n            \"Releasing Milestone\":\n                \"By releasing payments to the freelancer, it proves client is satisfied with the work completed so far.\",\n            \"Cancel Milestone\":\n                \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\",\n        },\n    },\n    Hourly: {\n        head: \"Hourly Work\",\n        subHeads: {\n            \"Creating Hourly Work\":\n                \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n            \"Weekly Billing\":\n                \"The payment is automatically paid every Tuesday of the previous week.\",\n            \"Cancel Milestone\":\n                \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\",\n        },\n    },\n    Contest: {\n        head: \"Contest\",\n        subHeads: {\n            \"Creating Hourly Work\":\n                \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n            \"Weekly Billing\":\n                \"The payment is automatically paid every Tuesday of the previous week.\",\n            \"Cancel Milestone\":\n                \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\",\n        },\n    },\n    OfficeWork: {\n        head: \"Office Work Contest\",\n        subHeads: {\n            \"Creating Office Work Work\":\n                \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n            \"Agreed Payment Term\":\n                \"The payment is automatically paid every Tuesday of the previous week.\",\n            \"Cancel Milestone\":\n                \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\",\n        },\n    },\n    FreeContract: {\n        head: \"Free Contract\",\n        subHeads: {\n            \"Creating Free Contract\":\n                \"The part-time system is conducted in a mutually verifiable method,Unlike milestones, regardless of the satisfaction level of the work result, unless it is a violation of Jungle Works It is impossible to refuse payment of the salary, but it can be canceled at any time. The operator's work is verified.\",\n            \"Weekly Billing\":\n                \"The payment is automatically paid every Tuesday of the previous week.\",\n            \"Cancel Milestone\":\n                \"Freelancer can cancel the pending payments, and the holding funds will be returned to the employee's account.\",\n        },\n    },\n};\n\nfunction PaymentInfo({ projectType }) {\n    const paymentInfo = PaymentInfoMap[projectType];\n\n    if (!paymentInfo) {\n        return null;\n    }\n\n    return (\n        <div className=\"map_div\">\n            <label>{paymentInfo.head}</label>\n            {\n                Object.entries(paymentInfo.subHeads).map(([key, value]) => (\n                    <div key={`${key}`} className=\"my-2\">\n                        <span className=\"font-weight-bold\">\n                            {key}:&nbsp;&nbsp;\n                        </span>\n                        <span className=\"text-justify\">{value}</span>\n                    </div>\n                ))\n            }\n        </div>\n    );\n}\n\nexport default PaymentInfo;\n"]},"metadata":{},"sourceType":"module"}