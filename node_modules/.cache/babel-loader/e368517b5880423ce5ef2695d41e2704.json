{"ast":null,"code":"var _jsxFileName = \"/var/www/php74/bearolefrontend/src/components/freelancer/freelancerTypeFilter.js\";\nimport React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport CheckboxCard from \"../checkboxCard/checkboxCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { projectPost_updateProjectType as updateProjectType } from \"../../store/action/Project/projectActions\";\n\nconst FreelancerTypeFilter = ({\n  freelancerTypes,\n  onChange\n}) => {\n  const [projectTypeItems, setProjectTypeItems] = useState([]); // [{name, title, checked}]\n\n  const dispatch = useDispatch();\n  const projectPost = useSelector(state => state.projectStore.projectPost);\n  const languageType = useSelector(state => state.languageReducer.languageType);\n  const languageReducer = useSelector(state => state.languageReducer);\n  useEffect(() => {\n    /*      debugger; */\n    const newProjectTypeItems = [];\n    freelancerTypes.forEach((projectType, index) => {\n      if (projectType.value === \"Any\") {\n        newProjectTypeItems.push({\n          name: index,\n          title: languageReducer.language === \"English\" ? 'Advanced Search' : languageReducer.language === \"Korean\" ? '상세 찾기' : languageReducer.language === \"Japanese\" ? '高度な検索' : 'Advanced Search',\n          checked: false\n        });\n      } else {\n        newProjectTypeItems.push({\n          name: index,\n          title: projectType.text,\n          checked: false\n        });\n      }\n    });\n    setProjectTypeItems(newProjectTypeItems);\n  }, []);\n  useEffect(() => {\n    let newProjectTypes = [...projectTypeItems];\n    let filterType = newProjectTypes.filter(item => item.checked === true)[0];\n\n    if (filterType) {\n      filterType.checked = false;\n      let newProjectType = newProjectTypes.filter(item => item.title === projectPost.projectType)[0];\n\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    } else {\n      let newProjectType = newProjectTypes.filter(item => item.title === projectPost.projectType)[0];\n\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    }\n  }, [projectPost.projectType]);\n\n  const onCheckboxCardChange = (event, type, index, name) => {\n    dispatch(updateProjectType(name));\n    onChange(event, type, index, name);\n  };\n\n  React.useEffect(() => {\n    if (!projectTypeItems.length) return;\n    const newProjectTypeItems = [...projectTypeItems];\n    freelancerTypes.forEach((projectType, index) => {\n      if (projectType.value === \"Any\") {\n        newProjectTypeItems[index].title = languageReducer.language === \"English\" ? 'Advanced Search' : languageReducer.language === \"Korean\" ? '상세 찾기' : languageReducer.language === \"Japanese\" ? '高度な検索' : 'Advanced Search';\n      } else {\n        newProjectTypeItems[index].title = projectType.text;\n      }\n    });\n    setProjectTypeItems(newProjectTypeItems);\n  }, [languageType]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    style: {\n      marginTop: \"20px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CheckboxCard, {\n    title: \"Freelancer Type\",\n    data: projectTypeItems,\n    type: \"freelancerTypes\",\n    onChange: onCheckboxCardChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst mapStateToProps = state => {\n  return {\n    freelancerTypes: state.languageReducer.freelancerTypes\n  };\n};\n\nexport default connect(mapStateToProps)(FreelancerTypeFilter);","map":{"version":3,"sources":["/var/www/php74/bearolefrontend/src/components/freelancer/freelancerTypeFilter.js"],"names":["React","useState","useEffect","connect","CheckboxCard","useDispatch","useSelector","projectPost_updateProjectType","updateProjectType","FreelancerTypeFilter","freelancerTypes","onChange","projectTypeItems","setProjectTypeItems","dispatch","projectPost","state","projectStore","languageType","languageReducer","newProjectTypeItems","forEach","projectType","index","value","push","name","title","language","checked","text","newProjectTypes","filterType","filter","item","newProjectType","onCheckboxCardChange","event","type","length","marginTop","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport CheckboxCard from \"../checkboxCard/checkboxCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { projectPost_updateProjectType as updateProjectType } from \"../../store/action/Project/projectActions\";\nconst FreelancerTypeFilter = ({ freelancerTypes, onChange }) => {\n  const [projectTypeItems, setProjectTypeItems] = useState([]); // [{name, title, checked}]\n  const dispatch = useDispatch();\n\n  const projectPost = useSelector((state) => state.projectStore.projectPost);\n  const languageType = useSelector(\n    (state) => state.languageReducer.languageType\n  );\n  const languageReducer = useSelector(\n    (state) => state.languageReducer\n  );\n  useEffect(() => {\n    /*      debugger; */\n    const newProjectTypeItems = [];\n    freelancerTypes.forEach((projectType, index) => {\n      if(projectType.value===\"Any\"){\n      newProjectTypeItems.push({\n        name: index,\n        title: languageReducer.language===\"English\"?'Advanced Search':languageReducer.language===\"Korean\"?'상세 찾기':languageReducer.language===\"Japanese\"?'高度な検索':'Advanced Search',\n        checked: false,\n      });\n    }else{\n      newProjectTypeItems.push({\n        name: index,\n        title: projectType.text,\n        checked: false,\n      });\n    }\n    });\n\n    setProjectTypeItems(newProjectTypeItems);\n  }, []);\n\n  useEffect(() => {\n    let newProjectTypes = [...projectTypeItems];\n    let filterType = newProjectTypes.filter((item) => item.checked === true)[0];\n    if (filterType) {\n      filterType.checked = false;\n      let newProjectType = newProjectTypes.filter(\n        (item) => item.title === projectPost.projectType\n      )[0];\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    } else {\n      let newProjectType = newProjectTypes.filter(\n        (item) => item.title === projectPost.projectType\n      )[0];\n      if (newProjectType) {\n        newProjectType.checked = true;\n        setProjectTypeItems(newProjectTypes);\n      }\n    }\n  }, [projectPost.projectType]);\n\n  const onCheckboxCardChange = (event, type, index, name) => {\n    dispatch(updateProjectType(name));\n    onChange(event, type, index, name);\n  };\n  React.useEffect(() => {\n    if (!projectTypeItems.length) return;\n    const newProjectTypeItems = [...projectTypeItems];\n    freelancerTypes.forEach((projectType, index) => {\n      if(projectType.value===\"Any\"){\n        newProjectTypeItems[index].title =languageReducer.language===\"English\"?'Advanced Search':languageReducer.language===\"Korean\"?'상세 찾기':languageReducer.language===\"Japanese\"?'高度な検索':'Advanced Search';\n      }else{\n        newProjectTypeItems[index].title = projectType.text;\n      }\n   \n    });\n    setProjectTypeItems(newProjectTypeItems);\n  }, [languageType]);\n  return (\n    <div style={{ marginTop: \"20px\" }}>\n    \n      <CheckboxCard\n        title=\"Freelancer Type\"\n        data={projectTypeItems}\n        type=\"freelancerTypes\"\n        onChange={onCheckboxCardChange}\n      />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    freelancerTypes: state.languageReducer.freelancerTypes,\n  };\n};\n\nexport default connect(mapStateToProps)(FreelancerTypeFilter);\n"]},"metadata":{},"sourceType":"module"}